From patchwork Wed Sep 25 16:14:23 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Paolo Bonzini <pbonzini@redhat.com>
X-Patchwork-Id: 11161051
Return-Path: <SRS0=acwS=XU=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id C9EE514E5
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 25 Sep 2019 16:14:33 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A8BD721D7B
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 25 Sep 2019 16:14:33 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=gmail.com header.i=@gmail.com header.b="Qdf8fwgk"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2501928AbfIYQOc (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 25 Sep 2019 12:14:32 -0400
Received: from mail-wr1-f65.google.com ([209.85.221.65]:37591 "EHLO
        mail-wr1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2501893AbfIYQOc (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 25 Sep 2019 12:14:32 -0400
Received: by mail-wr1-f65.google.com with SMTP id i1so7653719wro.4
        for <kvm@vger.kernel.org>; Wed, 25 Sep 2019 09:14:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=ejqQNMoRRAMOPTMnBY73/g20YxH+Gw85E8gBw9N3Y/k=;
        b=Qdf8fwgkYSPaShtkJqD6ILUQxwqOpCYK4A2U8aOftt9Ih9SkTbAU9D8kLgZoxHlL/0
         uk38TiQbn7RFI2gjb3Ifjy7gSZWjLDOyhaMCCUei1AlG0zmiQ6s/grhngk+C0QL21nHc
         lxSKZZeIMrafx3jW80uHYjXpS/769AsIDiMiKz5fycVGM4W4x6M70fnW5MH3ZIHjjwDO
         TcGk4+FDQa3ugJTy4eY3p6WXCRFbIBZ7UQW3/zPw3E+s1FjT04Dx91MOIqLN31xYcHIS
         +EmRp889M9008Y6UpL2HLJszpo88fWsTY9Ymk8IFLUR6O9rMJ7kGqz3MiO1a39A8DyTu
         h3ew==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
         :in-reply-to:references;
        bh=ejqQNMoRRAMOPTMnBY73/g20YxH+Gw85E8gBw9N3Y/k=;
        b=MWWl3bzAd2k6XZVynG3372h9EElxpY8cBqlhrjlrQRzKbJ6V4fjzV9Hhbh3kPoVq+S
         BS4HSmIq8G5hEUYoZtdsJzd6XFlB1nuBoA5ZJWXw3wGpLJjb8oB9h9fptTNXAo5h2dL/
         Z+SoFNXpE4d6fKB3vBs6/bkwxtgjDbMl93YjQBZVCc+2PHZ7GORZSKfScOiin5m/y2j+
         tE1jxtR/coMYcTwmd6Jb2ep96zpvqFvZCCbcVrC0BmC+VOBYurwdDUfvBJZa93Uw1j80
         AnqtZR/9A42NimmKxuuyvBsfNn/8TTomONKqSG9X8k2TkblkkGL2mgCAjGGouSLez48+
         6X9A==
X-Gm-Message-State: APjAAAXwnoH/D8gYWD5y8qlYzHqLnn6SUOFsuJXkyIdOqL5XHJzyJtbG
        BndD2hL4Sy2NAy5wsR9bkHmAziqb
X-Google-Smtp-Source: 
 APXvYqxGj5IuJFuiyT6keGWjixZfn2OZQZkQWiK5IokWpuBRZoGCMvd26pnI7BaZNF8Os5avfyf9Jg==
X-Received: by 2002:a05:6000:10c2:: with SMTP id
 b2mr9765331wrx.45.1569428069719;
        Wed, 25 Sep 2019 09:14:29 -0700 (PDT)
Received: from 640k.lan ([93.56.166.5])
        by smtp.gmail.com with ESMTPSA id
 a71sm4055293wme.11.2019.09.25.09.14.28
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 25 Sep 2019 09:14:28 -0700 (PDT)
From: Paolo Bonzini <pbonzini@redhat.com>
To: kvm@vger.kernel.org
Cc: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Subject: [PATCH kvm-unit-tests 1/4] x86: vmx_tests: gate load guest PAT tests
 on the correct bit
Date: Wed, 25 Sep 2019 18:14:23 +0200
Message-Id: <1569428066-27894-2-git-send-email-pbonzini@redhat.com>
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: <1569428066-27894-1-git-send-email-pbonzini@redhat.com>
References: <1569428066-27894-1-git-send-email-pbonzini@redhat.com>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The tests should check the "load PAT" entry control,
not the exit control.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 x86/vmx_tests.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index a447d39..b404219 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -7203,7 +7203,7 @@ static void test_load_guest_pat(void)
 	/*
 	 * "load IA32_PAT" VM-entry control
 	 */
-	if (!(ctrl_exit_rev.clr & ENT_LOAD_PAT)) {
+	if (!(ctrl_enter_rev.clr & ENT_LOAD_PAT)) {
 		printf("\"Load-IA32-PAT\" entry control not supported\n");
 		return;
 	}

From patchwork Wed Sep 25 16:14:24 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Paolo Bonzini <pbonzini@redhat.com>
X-Patchwork-Id: 11161053
Return-Path: <SRS0=acwS=XU=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 59FAA14E5
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 25 Sep 2019 16:14:35 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 2E7B821D7B
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 25 Sep 2019 16:14:35 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=gmail.com header.i=@gmail.com header.b="vQTYefry"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2501934AbfIYQOe (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 25 Sep 2019 12:14:34 -0400
Received: from mail-wm1-f66.google.com ([209.85.128.66]:40500 "EHLO
        mail-wm1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2501879AbfIYQOd (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 25 Sep 2019 12:14:33 -0400
Received: by mail-wm1-f66.google.com with SMTP id b24so5599020wmj.5
        for <kvm@vger.kernel.org>; Wed, 25 Sep 2019 09:14:31 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=I1YJZSEUWipf8xbAeAYPLDcuRWqrfHJ47Ct1YHgHIZo=;
        b=vQTYefryCDcSF2U8R7Ki7hz5+YN1HnxDMn638NR5h38080cWkrDmHjuwlav7PNLMpn
         iUingeqRvXw3bCsurT0wAmm4XJKbxk2lVx9xubePPqOftpk41BclXzklBD+0N/UT+Ucx
         gnEgqtr2BorQUIBJuYqbTWdOZCAaDPCcODTbQUCJRb0V6xiEBJx2gIE8Hzl+cFcoG01s
         +xMUrNLm9GbMd/Mfd8bywD1Xy6Lah6kD8cPbgIly42Up5FklQqlZGRWplOTXQGFb7BF1
         Ei4WnDS/SfgR+LCHX/qdXKUdDjQ2eEN+STqSamb8E8JIrP8Q6hnRLpT+oiGrOh+nmXfF
         Lwcg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
         :in-reply-to:references:mime-version:content-transfer-encoding;
        bh=I1YJZSEUWipf8xbAeAYPLDcuRWqrfHJ47Ct1YHgHIZo=;
        b=mg59UUKAKCKeghxYoByn5P9WHvegPIbHPjW6nC+Mndpo5h9lCHp0tihA0xp/kwe66B
         r9z/KnvmKBAXaui9eq7iOzIKSkEtNdseOVVp6T2tJ4J5At8IvvZgx4A4AH3RRLi4WIZv
         IE8D1UMs7ksh8Sq1F7+8TRmsTzQuoWzFqtrygAiuRdbCWiUpVIDrLn6+1cxmExcIGM6t
         hbUw99LVhuXWMTMbQJf6TiF+zVsbPAdcL78YBgcsGoFDlYZkpVeog3hdhSkWt/RSg7he
         7SogRCmYW1OZGPHlbwEG0MI5uv42X4tHtUPoiPpYxlaD/WG9H0WrJDY6H/4XBcx9xMpu
         FsPg==
X-Gm-Message-State: APjAAAVbnfRh+LbeaDEMZoMxPvQsHeVnCM69dkqO7s5f9qWAolVk2zZY
        KMAzsOB1pNeUEuC1YfPrACurEFGt
X-Google-Smtp-Source: 
 APXvYqza/nPRN7MeLyIlrFXcFFEtQ2YlRWghy5Ju7xK2tLesPOVU15++P2rRajHCn8F7WpUisF5hlQ==
X-Received: by 2002:a05:600c:2:: with SMTP id
 g2mr8545979wmc.111.1569428070799;
        Wed, 25 Sep 2019 09:14:30 -0700 (PDT)
Received: from 640k.lan ([93.56.166.5])
        by smtp.gmail.com with ESMTPSA id
 a71sm4055293wme.11.2019.09.25.09.14.29
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 25 Sep 2019 09:14:30 -0700 (PDT)
From: Paolo Bonzini <pbonzini@redhat.com>
To: kvm@vger.kernel.org
Cc: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Subject: [PATCH kvm-unit-tests 2/4] x86: vmx_tests: extend HOST_EFER tests
Date: Wed, 25 Sep 2019 18:14:24 +0200
Message-Id: <1569428066-27894-3-git-send-email-pbonzini@redhat.com>
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: <1569428066-27894-1-git-send-email-pbonzini@redhat.com>
References: <1569428066-27894-1-git-send-email-pbonzini@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Extend the tests to cover the host address size bit.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 x86/vmx_tests.c | 126 +++++++++++++++++++++++++++++++++-----------------------
 1 file changed, 74 insertions(+), 52 deletions(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index b404219..8851f64 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -6720,59 +6720,62 @@ static void test_host_ctl_regs(void)
 	vmcs_write(HOST_CR3, cr3_saved);
 }
 
-static void test_efer_bit(u32 fld, const char * fld_name, u32 ctrl_fld,
-			   u64 ctrl_bit, u64 efer_bit,
-			   const char *efer_bit_name)
+static void test_efer_one(u32 fld, const char * fld_name, u64 efer,
+			  u32 ctrl_fld, u64 ctrl,
+			  int i, const char *efer_bit_name)
 {
-	u64 efer_saved = vmcs_read(fld);
-	u32 ctrl_saved = vmcs_read(ctrl_fld);
-	u64 host_addr_size = ctrl_saved & EXI_HOST_64;
-	u64 efer;
+	bool ok;
 
-	vmcs_write(ctrl_fld, ctrl_saved & ~ctrl_bit);
-	efer = efer_saved & ~efer_bit;
-	vmcs_write(fld, efer);
-	report_prefix_pushf("%s bit turned off, %s %lx", efer_bit_name,
-			    fld_name, efer);
-	test_vmx_vmlaunch(0, false);
-	report_prefix_pop();
+	ok = true;
+	if (ctrl & EXI_LOAD_EFER) {
+		if (!!(efer & EFER_LMA) != !!(ctrl & EXI_HOST_64))
+			ok = false;
+		if (!!(efer & EFER_LME) != !!(ctrl & EXI_HOST_64))
+			ok = false;
+	}
 
-	efer = efer_saved | efer_bit;
+	vmcs_write(ctrl_fld, ctrl);
 	vmcs_write(fld, efer);
-	report_prefix_pushf("%s bit turned on, %s %lx", efer_bit_name,
-			    fld_name, efer);
-	test_vmx_vmlaunch(0, false);
-	report_prefix_pop();
+	report_prefix_pushf("%s %s bit turned %s, controls %s",
+			    fld_name, efer_bit_name,
+			    (i & 1) ? "on" : "off",
+			    (i & 2) ? "on" : "off");
 
-	vmcs_write(ctrl_fld, ctrl_saved | ctrl_bit);
-	efer = efer_saved & ~efer_bit;
-	vmcs_write(fld, efer);
-	report_prefix_pushf("%s bit turned off, %s %lx", efer_bit_name,
-			    fld_name, efer);
-	if (host_addr_size)
-		test_vmx_vmlaunch(VMXERR_ENTRY_INVALID_HOST_STATE_FIELD,
-				  false);
-	else
-		test_vmx_vmlaunch(0, false);
-	report_prefix_pop();
-
-	efer = efer_saved | efer_bit;
-	vmcs_write(fld, efer);
-	report_prefix_pushf("%s bit turned on, %s %lx", efer_bit_name,
-			    fld_name, efer);
-	if (host_addr_size)
+	if (ok)
 		test_vmx_vmlaunch(0, false);
 	else
 		test_vmx_vmlaunch(VMXERR_ENTRY_INVALID_HOST_STATE_FIELD,
 				  false);
 	report_prefix_pop();
+}
+
+static void test_efer_bit(u32 fld, const char * fld_name,
+			  u32 ctrl_fld, u64 ctrl_bit, u64 efer_bit,
+			  const char *efer_bit_name)
+{
+	u64 efer_saved = vmcs_read(fld);
+	u32 ctrl_saved = vmcs_read(ctrl_fld);
+	int i;
+
+	for (i = 0; i < 4; i++) {
+		u64 efer = efer_saved & ~efer_bit;
+		u64 ctrl = ctrl_saved & ~ctrl_bit;
+
+		if (i & 1)
+			efer |= efer_bit;
+		if (i & 2)
+			ctrl |= ctrl_bit;
+
+		test_efer_one(fld, fld_name, efer, ctrl_fld, ctrl,
+			      i, efer_bit_name);
+	}
 
 	vmcs_write(ctrl_fld, ctrl_saved);
 	vmcs_write(fld, efer_saved);
 }
 
 static void test_efer(u32 fld, const char * fld_name, u32 ctrl_fld,
-		      u64 ctrl_bit)
+		      u64 ctrl_bit1, u64 ctrl_bit2)
 {
 	u64 efer_saved = vmcs_read(fld);
 	u32 ctrl_saved = vmcs_read(ctrl_fld);
@@ -6783,10 +6786,19 @@ static void test_efer(u32 fld, const char * fld_name, u32 ctrl_fld,
 	if (cpu_has_efer_nx())
 		efer_reserved_bits &= ~EFER_NX;
 
+	if (!ctrl_bit1) {
+		printf("\"Load-IA32-EFER\" exit control not supported\n");
+		goto test_entry_exit_mode;
+	}
+
+	report_prefix_pushf("%s %lx", fld_name, efer_saved);
+	test_vmx_vmlaunch(0, false);
+	report_prefix_pop();
+
 	/*
 	 * Check reserved bits
 	 */
-	vmcs_write(ctrl_fld, ctrl_saved & ~ctrl_bit);
+	vmcs_write(ctrl_fld, ctrl_saved & ~ctrl_bit1);
 	for (i = 0; i < 64; i++) {
 		if ((1ull << i) & efer_reserved_bits) {
 			efer = efer_saved | (1ull << i);
@@ -6797,15 +6809,14 @@ static void test_efer(u32 fld, const char * fld_name, u32 ctrl_fld,
 		}
 	}
 
-	vmcs_write(ctrl_fld, ctrl_saved | ctrl_bit);
+	vmcs_write(ctrl_fld, ctrl_saved | ctrl_bit1);
 	for (i = 0; i < 64; i++) {
 		if ((1ull << i) & efer_reserved_bits) {
 			efer = efer_saved | (1ull << i);
 			vmcs_write(fld, efer);
 			report_prefix_pushf("%s %lx", fld_name, efer);
-			test_vmx_vmlaunch(
-				VMXERR_ENTRY_INVALID_HOST_STATE_FIELD,
-				false);
+			test_vmx_vmlaunch(VMXERR_ENTRY_INVALID_HOST_STATE_FIELD,
+					  false);
 			report_prefix_pop();
 		}
 	}
@@ -6816,28 +6827,39 @@ static void test_efer(u32 fld, const char * fld_name, u32 ctrl_fld,
 	/*
 	 * Check LMA and LME bits
 	 */
-	test_efer_bit(fld, fld_name, ctrl_fld, ctrl_bit, EFER_LMA,
+	test_efer_bit(fld, fld_name,
+		      ctrl_fld, ctrl_bit1,
+		      EFER_LMA,
+		      "EFER_LMA");
+	test_efer_bit(fld, fld_name,
+		      ctrl_fld, ctrl_bit1,
+		      EFER_LME,
+		      "EFER_LME");
+
+test_entry_exit_mode:
+	test_efer_bit(fld, fld_name,
+		      ctrl_fld, ctrl_bit2,
+		      EFER_LMA,
 		      "EFER_LMA");
-	test_efer_bit(fld, fld_name, ctrl_fld, ctrl_bit, EFER_LME,
+	test_efer_bit(fld, fld_name,
+		      ctrl_fld, ctrl_bit2,
+		      EFER_LME,
 		      "EFER_LME");
 }
 
 /*
- * If the â€œload IA32_EFERâ€ VM-exit control is 1, bits reserved in the
+ * If the 'load IA32_EFER' VM-exit control is 1, bits reserved in the
  * IA32_EFER MSR must be 0 in the field for that register. In addition,
  * the values of the LMA and LME bits in the field must each be that of
- * the â€œhost address-space sizeâ€ VM-exit control.
+ * the 'host address-space size' VM-exit control.
  *
  *  [Intel SDM]
  */
 static void test_host_efer(void)
 {
-	if (!(ctrl_exit_rev.clr & EXI_LOAD_EFER)) {
-		printf("\"Load-IA32-EFER\" exit control not supported\n");
-		return;
-	}
-
-	test_efer(HOST_EFER, "HOST_EFER", EXI_CONTROLS, EXI_LOAD_EFER);
+	test_efer(HOST_EFER, "HOST_EFER", EXI_CONTROLS, 
+		  ctrl_exit_rev.clr & EXI_LOAD_EFER,
+		  EXI_HOST_64);
 }
 
 /*

From patchwork Wed Sep 25 16:14:25 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Paolo Bonzini <pbonzini@redhat.com>
X-Patchwork-Id: 11161055
Return-Path: <SRS0=acwS=XU=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id CC5641709
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 25 Sep 2019 16:14:35 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id AB20D21D7F
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 25 Sep 2019 16:14:35 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=gmail.com header.i=@gmail.com header.b="BHZYujlk"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2501941AbfIYQOf (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 25 Sep 2019 12:14:35 -0400
Received: from mail-wr1-f66.google.com ([209.85.221.66]:41156 "EHLO
        mail-wr1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2501893AbfIYQOe (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 25 Sep 2019 12:14:34 -0400
Received: by mail-wr1-f66.google.com with SMTP id h7so7645749wrw.8
        for <kvm@vger.kernel.org>; Wed, 25 Sep 2019 09:14:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=ZsN4yJ+cKefDSI9gMJYMaAs3GGrqpiNIRsh5EA+8dkI=;
        b=BHZYujlkwLRePS3KV8Pytm3XxRmmALvUu5c1dZI6X+Uh3k+S5yF5p+zg90fSUueub9
         jlsl9FC0Rcdzmu5K5CXg/j4VVSIEOWMXSr+ERHSm5NHx2bp4S4bnGnVj6VP1dcqebB4T
         x7sDiAhsYT45R8pzF71NKOTnrbCMiPmUXyS8nTvFlW5BWp8nrMUEza+dx2bQIR307+1l
         TpG7RrBc2lEy19GlNQNgl4o3BC/yvkqmocGU4cNR9dmAb9DjOaSaInxoR7b3MOlwgi5U
         Jz76wUrdowv291ttNCKgSKuJXa/EZEoKQTGyCZAY/sXVQSTeWvejNwXfR4fGGipVFQpv
         8QnA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
         :in-reply-to:references;
        bh=ZsN4yJ+cKefDSI9gMJYMaAs3GGrqpiNIRsh5EA+8dkI=;
        b=oUe+uKnHfo+9mbtlUKkJzNzd1CKSg0ywCdZ1SGm3ZrSZyzK47eh3bU4bReUsfp5FO6
         Z7o5R66p/PFMBA01fZwE70c1Vpt+Xnu+vnsZa4lf0RvmiKkTSJS1K4U6ZAJ3G++hTfBJ
         QnVdQZimKSVkYgpQNlC5Gy/78uOhv8Wl4iR6n8yDvBsTo9ScfI98g0pMqf23KrxaTQww
         HPQHOpg3A5TOvuXhcHQ7zxwbMjU3yl8qjS41q2ABOJDbUislu/TUvddeN03FewmXgKPL
         IKrxsyhHgE1OWUDICa0+VYxtkKmLwbJGDTrsoxR2uNs4kGHkrPPbt9fZ39/bdcDK9d23
         ep+g==
X-Gm-Message-State: APjAAAW3A9yhqzQvheBgND+Hi+YNTRtqd8Lr0bHDtmuX581mAjdraJIv
        wzFtwqgBZdSMqIqpVL4VGxEDEiOz
X-Google-Smtp-Source: 
 APXvYqzxQ595aHipY/R/RnEIWqPcXk9nVhlDI9JG5Y2KzQGEdmblIXKVtm7b6j0L69Ki2EvSgq0ERQ==
X-Received: by 2002:adf:f20e:: with SMTP id p14mr9654648wro.212.1569428071839;
        Wed, 25 Sep 2019 09:14:31 -0700 (PDT)
Received: from 640k.lan ([93.56.166.5])
        by smtp.gmail.com with ESMTPSA id
 a71sm4055293wme.11.2019.09.25.09.14.30
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 25 Sep 2019 09:14:31 -0700 (PDT)
From: Paolo Bonzini <pbonzini@redhat.com>
To: kvm@vger.kernel.org
Cc: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Subject: [PATCH kvm-unit-tests 3/4] x86: vmx_tests: prepare for extending
 guest state area tests
Date: Wed, 25 Sep 2019 18:14:25 +0200
Message-Id: <1569428066-27894-4-git-send-email-pbonzini@redhat.com>
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: <1569428066-27894-1-git-send-email-pbonzini@redhat.com>
References: <1569428066-27894-1-git-send-email-pbonzini@redhat.com>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Move the test setup and teardown from test_pat to vmx_guest_state_area_test,
so that we can add more tests after test_load_guest_pat.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 x86/vmx_tests.c | 22 +++++++++-------------
 1 file changed, 9 insertions(+), 13 deletions(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index 8851f64..97aff6e 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -6879,10 +6879,6 @@ static void test_pat(u32 field, const char * field_name, u32 ctrl_field,
 	int error;
 
 	vmcs_clear_bits(ctrl_field, ctrl_bit);
-	if (field == GUEST_PAT) {
-		vmx_set_test_stage(1);
-		test_set_guest(guest_state_test_main);
-	}
 
 	for (i = 0; i < 256; i = (i < PAT_VAL_LIMIT) ? i + 1 : i * 2) {
 		/* Test PAT0..PAT7 fields */
@@ -6942,15 +6938,6 @@ static void test_pat(u32 field, const char * field_name, u32 ctrl_field,
 		}
 	}
 
-	if (field == GUEST_PAT) {
-		/*
-		 * Let the guest finish execution
-		 */
-		vmx_set_test_stage(2);
-		vmcs_write(field, pat_saved);
-		enter_guest();
-	}
-
 	vmcs_write(ctrl_field, ctrl_saved);
 	vmcs_write(field, pat_saved);
 }
@@ -7239,7 +7226,16 @@ static void test_load_guest_pat(void)
  */
 static void vmx_guest_state_area_test(void)
 {
+	vmx_set_test_stage(1);
+	test_set_guest(guest_state_test_main);
+
 	test_load_guest_pat();
+
+	/*
+	 * Let the guest finish execution
+	 */
+	vmx_set_test_stage(2);
+	enter_guest();
 }
 
 static bool valid_vmcs_for_vmentry(void)

From patchwork Wed Sep 25 16:14:26 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Paolo Bonzini <pbonzini@redhat.com>
X-Patchwork-Id: 11161057
Return-Path: <SRS0=acwS=XU=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id E751714E5
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 25 Sep 2019 16:14:37 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id BC49121D7F
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 25 Sep 2019 16:14:37 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=gmail.com header.i=@gmail.com header.b="JOTYodMP"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2501955AbfIYQOg (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 25 Sep 2019 12:14:36 -0400
Received: from mail-wr1-f65.google.com ([209.85.221.65]:37601 "EHLO
        mail-wr1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2501930AbfIYQOf (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 25 Sep 2019 12:14:35 -0400
Received: by mail-wr1-f65.google.com with SMTP id i1so7653946wro.4
        for <kvm@vger.kernel.org>; Wed, 25 Sep 2019 09:14:34 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=Rj7/KDF66bdDSEPloby9vBkkQ1BDy0pvyO2EacE/Ml4=;
        b=JOTYodMPxJPqyTrEvGZMeq3XfGvDm7z5V+rx57E1ibjCGpi2RTTbvjw3u6H6XGqpMQ
         dlE25dUAkU6W5X9lLCllXfmSQQ6UaByQiRoWySzH/oXRBWoNaM3p0clt6rQPzzuXEEGu
         udJXtvtKKnuPuWt+6ZZlWKTs+Fir27Q3vKBmEa4lF1+Q72Z2+BCkn5oxaM0ODFfME0qg
         WL/yIZQh5vtkbs24DMxEznXouzK2OAjm/AZCrvkYSP7Ut0mky2YYE+KqWGIYx8gJOx2P
         QyV0oCpBHL6263TNk36DK4OspH45LbkXnWyKqo1JnKLhYv2KtueKrIsrGm97fHELhMbT
         ao8Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
         :in-reply-to:references;
        bh=Rj7/KDF66bdDSEPloby9vBkkQ1BDy0pvyO2EacE/Ml4=;
        b=NV96K7UZncjqOuhydQ2i+dpqP1yrC1xCuiNkiseiupHfUDpAP1QrbU3p+UcoReW9tW
         WZu0J6t4P4LonvySNR7vAivv0vgU6AjCsxVzJZVqHMNXHlDHuiX+z2ZQjxqei6UaRc4e
         t6PUGA5Q6pC5f6N9ropikS9HURt9k8De9HW6DnIjPyv7D1/rF1ri9Rhe9vdKNypjski0
         efwzsiBEMnCUuk7IQFdABknab1EZOG0h4NaowOmo7THfZ/zTuUbKx4dJNgkS7+1E8Nhs
         brh2vaVEfFzpRp0TwsTLYUCQvQLRDKrJTGW71BlGNCxrfAU4z00gsthjmtVYe9X8wuVf
         kOZA==
X-Gm-Message-State: APjAAAUx+PaGvTKP6xgS+pVPRBDgLDpHylel1I3TLPE/9DL75w2GT3P1
        l2Cgpxh7xVJfCX3+djpykZJYoiI0
X-Google-Smtp-Source: 
 APXvYqzFoMYQQoNSGawZfku2wIXIi+J+wLU9xqhzTdNa8QV2wYYRhpNq9IVv3hy9R/qO1gA6q0UXQg==
X-Received: by 2002:adf:cc8a:: with SMTP id p10mr9997803wrj.321.1569428073024;
        Wed, 25 Sep 2019 09:14:33 -0700 (PDT)
Received: from 640k.lan ([93.56.166.5])
        by smtp.gmail.com with ESMTPSA id
 a71sm4055293wme.11.2019.09.25.09.14.31
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 25 Sep 2019 09:14:32 -0700 (PDT)
From: Paolo Bonzini <pbonzini@redhat.com>
To: kvm@vger.kernel.org
Cc: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Subject: [PATCH kvm-unit-tests 4/4] x86: vmx_tests: add GUEST_EFER tests
Date: Wed, 25 Sep 2019 18:14:26 +0200
Message-Id: <1569428066-27894-5-git-send-email-pbonzini@redhat.com>
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: <1569428066-27894-1-git-send-email-pbonzini@redhat.com>
References: <1569428066-27894-1-git-send-email-pbonzini@redhat.com>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

Conflicts:
	x86/vmx_tests.c
---
 x86/vmx_tests.c | 87 ++++++++++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 70 insertions(+), 17 deletions(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index 97aff6e..dba61a3 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -5030,19 +5030,23 @@ static void guest_state_test_main(void)
 	asm volatile("fnop");
 }
 
+static void advance_guest_state_test(void)
+{
+	u32 reason = vmcs_read(EXI_REASON);
+	if (! (reason & 0x80000000)) {
+		u64 guest_rip = vmcs_read(GUEST_RIP);
+		u32 insn_len = vmcs_read(EXI_INST_LEN);
+		vmcs_write(GUEST_RIP, guest_rip + insn_len);
+	}
+}
+
 static void report_guest_state_test(const char *test, u32 xreason,
 				    u64 field, const char * field_name)
 {
 	u32 reason = vmcs_read(EXI_REASON);
-	u64 guest_rip;
-	u32 insn_len;
 
 	report("%s, %s %lx", reason == xreason, test, field_name, field);
-
-	guest_rip = vmcs_read(GUEST_RIP);
-	insn_len = vmcs_read(EXI_INST_LEN);
-	if (! (reason & 0x80000021))
-		vmcs_write(GUEST_RIP, guest_rip + insn_len);
+	advance_guest_state_test();
 }
 
 /*
@@ -6720,6 +6724,25 @@ static void test_host_ctl_regs(void)
 	vmcs_write(HOST_CR3, cr3_saved);
 }
 
+static void test_efer_vmlaunch(u32 fld, bool ok)
+{
+	if (fld == HOST_EFER) {
+		if (ok)
+			test_vmx_vmlaunch(0, false);
+		else
+			test_vmx_vmlaunch(VMXERR_ENTRY_INVALID_HOST_STATE_FIELD, false);
+	} else {
+		if (ok) {
+			enter_guest();
+			report("vmlaunch succeeds", vmcs_read(EXI_REASON) == VMX_VMCALL);
+		} else {
+			enter_guest_with_invalid_guest_state();
+			report("vmlaunch fails", vmcs_read(EXI_REASON) == (VMX_ENTRY_FAILURE | VMX_FAIL_STATE));
+		}
+		advance_guest_state_test();
+	}
+}
+
 static void test_efer_one(u32 fld, const char * fld_name, u64 efer,
 			  u32 ctrl_fld, u64 ctrl,
 			  int i, const char *efer_bit_name)
@@ -6727,12 +6750,27 @@ static void test_efer_one(u32 fld, const char * fld_name, u64 efer,
 	bool ok;
 
 	ok = true;
-	if (ctrl & EXI_LOAD_EFER) {
+	if (ctrl_fld == EXI_CONTROLS && (ctrl & EXI_LOAD_EFER)) {
 		if (!!(efer & EFER_LMA) != !!(ctrl & EXI_HOST_64))
 			ok = false;
 		if (!!(efer & EFER_LME) != !!(ctrl & EXI_HOST_64))
 			ok = false;
 	}
+	if (ctrl_fld == ENT_CONTROLS && (ctrl & ENT_LOAD_EFER)) {
+		/* Check LMA too since CR0.PG is set.  */
+		if (!!(efer & EFER_LMA) != !!(ctrl & ENT_GUEST_64))
+			ok = false;
+		if (!!(efer & EFER_LME) != !!(ctrl & ENT_GUEST_64))
+			ok = false;
+	}
+
+	/*
+	 * Skip the test if it would enter the guest in 32-bit mode.
+	 * Perhaps write the test in assembly and make sure it
+	 * can be run in either mode?
+	 */
+	if (fld == GUEST_EFER && ok && !(ctrl & ENT_GUEST_64))
+		return;
 
 	vmcs_write(ctrl_fld, ctrl);
 	vmcs_write(fld, efer);
@@ -6741,11 +6779,7 @@ static void test_efer_one(u32 fld, const char * fld_name, u64 efer,
 			    (i & 1) ? "on" : "off",
 			    (i & 2) ? "on" : "off");
 
-	if (ok)
-		test_vmx_vmlaunch(0, false);
-	else
-		test_vmx_vmlaunch(VMXERR_ENTRY_INVALID_HOST_STATE_FIELD,
-				  false);
+	test_efer_vmlaunch(fld, ok);
 	report_prefix_pop();
 }
 
@@ -6792,7 +6826,7 @@ static void test_efer(u32 fld, const char * fld_name, u32 ctrl_fld,
 	}
 
 	report_prefix_pushf("%s %lx", fld_name, efer_saved);
-	test_vmx_vmlaunch(0, false);
+	test_efer_vmlaunch(fld, true);
 	report_prefix_pop();
 
 	/*
@@ -6804,7 +6838,7 @@ static void test_efer(u32 fld, const char * fld_name, u32 ctrl_fld,
 			efer = efer_saved | (1ull << i);
 			vmcs_write(fld, efer);
 			report_prefix_pushf("%s %lx", fld_name, efer);
-			test_vmx_vmlaunch(0, false);
+			test_efer_vmlaunch(fld, true);
 			report_prefix_pop();
 		}
 	}
@@ -6815,8 +6849,7 @@ static void test_efer(u32 fld, const char * fld_name, u32 ctrl_fld,
 			efer = efer_saved | (1ull << i);
 			vmcs_write(fld, efer);
 			report_prefix_pushf("%s %lx", fld_name, efer);
-			test_vmx_vmlaunch(VMXERR_ENTRY_INVALID_HOST_STATE_FIELD,
-					  false);
+			test_efer_vmlaunch(fld, false);
 			report_prefix_pop();
 		}
 	}
@@ -6863,6 +6896,25 @@ static void test_host_efer(void)
 }
 
 /*
+ * If the 'load IA32_EFER' VM-enter control is 1, bits reserved in the
+ * IA32_EFER MSR must be 0 in the field for that register. In addition,
+ * the values of the LMA and LME bits in the field must each be that of
+ * the 'IA32e-mode guest' VM-exit control.
+ */
+static void test_guest_efer(void)
+{
+	if (!(ctrl_enter_rev.clr & ENT_LOAD_EFER)) {
+		printf("\"Load-IA32-EFER\" entry control not supported\n");
+		return;
+	}
+
+	vmcs_write(GUEST_EFER, rdmsr(MSR_EFER));
+	test_efer(GUEST_EFER, "GUEST_EFER", ENT_CONTROLS,
+		  ctrl_enter_rev.clr & ENT_LOAD_EFER,
+		  ENT_GUEST_64);
+}
+
+/*
  * PAT values higher than 8 are uninteresting since they're likely lumped
  * in with "8". We only test values above 8 one bit at a time,
  * in order to reduce the number of VM-Entries and keep the runtime reasonable.
@@ -7230,6 +7282,7 @@ static void vmx_guest_state_area_test(void)
 	test_set_guest(guest_state_test_main);
 
 	test_load_guest_pat();
+	test_guest_efer();
 
 	/*
 	 * Let the guest finish execution
