From patchwork Thu Sep 26 00:04:17 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 11161749
Return-Path: <SRS0=ErSa=XV=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id E53CF112B
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 26 Sep 2019 00:05:28 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id B8FE5208C3
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 26 Sep 2019 00:05:28 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="FZ33j6yh"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1733311AbfIZAE3 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 25 Sep 2019 20:04:29 -0400
Received: from mail-qk1-f201.google.com ([209.85.222.201]:53767 "EHLO
        mail-qk1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1733141AbfIZAE2 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 25 Sep 2019 20:04:28 -0400
Received: by mail-qk1-f201.google.com with SMTP id g62so566908qkb.20
        for <kvm@vger.kernel.org>; Wed, 25 Sep 2019 17:04:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:message-id:mime-version:subject:from:to:cc;
        bh=0aiAhoNw7rgiXm4ReXuu/I7OpOSCaP8Se4pfHqvUc7o=;
        b=FZ33j6yhM793vppuNUJ9eG0snnRS4NCqlhG5FAi4ykVYuzZIJU0X82/o4XRchT08q5
         hhvT1EE+SfGeuv04QsX2h08Clq95IfQZz4l5xfbnGT+ntVsR255IFyUIqiZTAMMlqcIJ
         0h6H15f+74Sj5CmhgSvdPYY+xYZP/sLwRmd/hTkjndwUf5/2SQtYz+61RF3cJeVNYN3o
         x46ChISCwdKDzhqxeKwhalNozHauDMkxiRaFztYT7/OpTTrsLJgk2EON40LIO8+rXJ1r
         UeZhqOrHSSsosQh0LNC8NIUXU63MGXtexfnM1tiEudCkd5DsQ5d28a8jo84IQe/iMTXv
         mXhQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:message-id:mime-version:subject:from:to:cc;
        bh=0aiAhoNw7rgiXm4ReXuu/I7OpOSCaP8Se4pfHqvUc7o=;
        b=Wo1YGI0VKQ2uWFzt5cGbSryLEocxOMgkhJ0ykaV3eF2TGqfzFE78EUIIgt9Nb+Kkgy
         bOYYzc/edMVj7E7Mrzz1yz1Ct1SrzmSu5k48Ynor/sbhRwbkrs1097gWD/OCJL2difQ2
         GFt+c8I6m7Cl5CBu7yTJDvcmiOTfffKp4jGaMTW1jsH+etz6TGAXdxqTNvLXDgplIYOq
         oweovlL4DLVFcdHGiQeOCmkglXsiEXP1eJn+yyCnbeFCpGvPL3OK6iNBylqiGMn6cWx+
         Es4DGPDfvNYmmkSBjFem0hD0EXslRxpyiS0SEtR1R9v6qOL4tmpTNyzSYQKilQnJgTa9
         p2qA==
X-Gm-Message-State: APjAAAXZ67/j/rYw4Lq/6rf6eMbJN26V1LJ9R2r7n0Hz17Q3DarBocOF
        SQEI9VBVcTprS0fVfqquBcz68j8UUjyBKKq4sgMmjFjUC5z+MT6ffMCWVd/XEXR3JlRascaC/Lb
        9tzS/ugs2+P8uutwNJkOPS85um7eZ7Vir9cXC3wldXis4RBi8x4vWog1CDBpoaCY=
X-Google-Smtp-Source: 
 APXvYqwV/ff1pFk/QG7OJ4dfX+tMHLc3N+0sDlTyyzdy2GU5+St5jjQGj3Yin7FYJgTVbov9tmPmtH17c5EMdA==
X-Received: by 2002:ac8:7244:: with SMTP id l4mr1254814qtp.40.1569456267027;
 Wed, 25 Sep 2019 17:04:27 -0700 (PDT)
Date: Wed, 25 Sep 2019 17:04:17 -0700
Message-Id: <20190926000418.115956-1-jmattson@google.com>
Mime-Version: 1.0
X-Mailer: git-send-email 2.23.0.351.gc4317032e6-goog
Subject: [PATCH 1/2] kvm: x86: Improve emulation of CPUID leaves 0BH and 1FH
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Jim Mattson <jmattson@google.com>, Marc Orr <marcorr@google.com>,
        Peter Shier <pshier@google.com>,
        Jacob Xu <jacobhxu@google.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Paolo Bonzini <pbonzini@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

For these CPUID leaves, the EDX output is not dependent on the ECX
input (i.e. the SIGNIFCANT_INDEX flag doesn't apply to
EDX). Furthermore, the low byte of the ECX output is always identical
to the low byte of the ECX input. KVM does not produce the correct ECX
and EDX outputs for any undefined subleaves beyond the first.

Special-case these CPUID leaves in kvm_cpuid, so that the ECX and EDX
outputs are properly generated for all undefined subleaves.

Fixes: 0771671749b59a ("KVM: Enhance guest cpuid management")
Fixes: a87f2d3a6eadab ("KVM: x86: Add Intel CPUID.1F cpuid emulation support")
Signed-off-by: Jim Mattson <jmattson@google.com>
Reviewed-by: Marc Orr <marcorr@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
Reviewed-by: Jacob Xu <jacobhxu@google.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
---
 arch/x86/kvm/cpuid.c | 83 +++++++++++++++++++++++++-------------------
 1 file changed, 47 insertions(+), 36 deletions(-)

diff --git a/arch/x86/kvm/cpuid.c b/arch/x86/kvm/cpuid.c
index dd5985eb61b4c..35e2f930a4b79 100644
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -963,53 +963,64 @@ struct kvm_cpuid_entry2 *kvm_find_cpuid_entry(struct kvm_vcpu *vcpu,
 EXPORT_SYMBOL_GPL(kvm_find_cpuid_entry);
 
 /*
- * If no match is found, check whether we exceed the vCPU's limit
- * and return the content of the highest valid _standard_ leaf instead.
- * This is to satisfy the CPUID specification.
+ * If the basic or extended CPUID leaf requested is higher than the
+ * maximum supported basic or extended leaf, respectively, then it is
+ * out of range.
  */
-static struct kvm_cpuid_entry2* check_cpuid_limit(struct kvm_vcpu *vcpu,
-                                                  u32 function, u32 index)
+static bool cpuid_function_in_range(struct kvm_vcpu *vcpu, u32 function)
 {
-	struct kvm_cpuid_entry2 *maxlevel;
-
-	maxlevel = kvm_find_cpuid_entry(vcpu, function & 0x80000000, 0);
-	if (!maxlevel || maxlevel->eax >= function)
-		return NULL;
-	if (function & 0x80000000) {
-		maxlevel = kvm_find_cpuid_entry(vcpu, 0, 0);
-		if (!maxlevel)
-			return NULL;
-	}
-	return kvm_find_cpuid_entry(vcpu, maxlevel->eax, index);
+	struct kvm_cpuid_entry2 *max;
+
+	max = kvm_find_cpuid_entry(vcpu, function & 0x80000000, 0);
+	return max && function <= max->eax;
 }
 
 bool kvm_cpuid(struct kvm_vcpu *vcpu, u32 *eax, u32 *ebx,
 	       u32 *ecx, u32 *edx, bool check_limit)
 {
 	u32 function = *eax, index = *ecx;
-	struct kvm_cpuid_entry2 *best;
-	bool entry_found = true;
-
-	best = kvm_find_cpuid_entry(vcpu, function, index);
-
-	if (!best) {
-		entry_found = false;
-		if (!check_limit)
-			goto out;
+	struct kvm_cpuid_entry2 *entry;
+	struct kvm_cpuid_entry2 *max;
+	bool found;
 
-		best = check_cpuid_limit(vcpu, function, index);
+	entry = kvm_find_cpuid_entry(vcpu, function, index);
+	found = entry;
+	/*
+	 * Intel CPUID semantics treats any query for an out-of-range
+	 * leaf as if the highest basic leaf (i.e. CPUID.0H:EAX) were
+	 * requested.
+	 */
+	if (!entry && check_limit && !cpuid_function_in_range(vcpu, function)) {
+		max = kvm_find_cpuid_entry(vcpu, 0, 0);
+		if (max) {
+			function = max->eax;
+			entry = kvm_find_cpuid_entry(vcpu, function, index);
+		}
 	}
-
-out:
-	if (best) {
-		*eax = best->eax;
-		*ebx = best->ebx;
-		*ecx = best->ecx;
-		*edx = best->edx;
-	} else
+	if (entry) {
+		*eax = entry->eax;
+		*ebx = entry->ebx;
+		*ecx = entry->ecx;
+		*edx = entry->edx;
+	} else {
 		*eax = *ebx = *ecx = *edx = 0;
-	trace_kvm_cpuid(function, *eax, *ebx, *ecx, *edx, entry_found);
-	return entry_found;
+		/*
+		 * When leaf 0BH or 1FH is defined, CL is pass-through
+		 * and EDX is always the x2APIC ID, even for undefined
+		 * subleaves. Index 1 will exist iff the leaf is
+		 * implemented, so we pass through CL iff leaf 1
+		 * exists. EDX can be copied from any existing index.
+		 */
+		if (function == 0xb || function == 0x1f) {
+			entry = kvm_find_cpuid_entry(vcpu, function, 1);
+			if (entry) {
+				*ecx = index & 0xff;
+				*edx = entry->edx;
+			}
+		}
+	}
+	trace_kvm_cpuid(function, *eax, *ebx, *ecx, *edx, found);
+	return found;
 }
 EXPORT_SYMBOL_GPL(kvm_cpuid);
 

From patchwork Thu Sep 26 00:04:18 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 11161751
Return-Path: <SRS0=ErSa=XV=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 1C87714ED
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 26 Sep 2019 00:05:29 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id EEBC5208C3
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 26 Sep 2019 00:05:28 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="M8nvVr/r"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2387510AbfIZAEe (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 25 Sep 2019 20:04:34 -0400
Received: from mail-pf1-f202.google.com ([209.85.210.202]:48109 "EHLO
        mail-pf1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2387446AbfIZAEe (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 25 Sep 2019 20:04:34 -0400
Received: by mail-pf1-f202.google.com with SMTP id t65so408173pfd.14
        for <kvm@vger.kernel.org>; Wed, 25 Sep 2019 17:04:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=49oCgRcdkWxb62ErfpRG4ZnwP7arNC1z90JtyhRPLsg=;
        b=M8nvVr/rT4GKajhGPDgGHNuJtemvyDQKyIgEflDTM9r5posDFPDAhDgqpqPmihdqg4
         n0v0AKe+7pCECMeL8WhKLztY7R+N2SPr2w5iHeOyOgJVdSj9Idkyndq3sPrTLf9+n5Ua
         HOKIwJPj4dxaG+ROw6u/TCLs+4r5DlW4Fvbb2vn0NM4Ic6s04SKFOTQB8BmiiRmuGSGF
         AaFXHGBau+tT2OxvifB5YFmUOaHMbrQ3Rp5XNesrpKu5z2PIS0SdNnfLLlOmgSOdDaX8
         /6I+AX9EUc5KuIlTNkNYOYmYDaRx2Hy+M1PdhcPj6ihMTFAmxpjnYV7oSVYKxunvfPQp
         virg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=49oCgRcdkWxb62ErfpRG4ZnwP7arNC1z90JtyhRPLsg=;
        b=tGIcAhV+ZLJ+FMx5lAFBI5XQvUKsgyO1K8cstSHP5WNqRCg38ZQv9xDPCouuFtOqTb
         9FdhZUD6jbG5IVJYCvDsRm7QSFHeprK2ns/NTehXsPMadOqHgpl0jSQqv8DLoLja3RRV
         8zgrxjsP4xIfQa1b96tC1jm16b4cSiR218jNM0jBcwUnnfhEini45Tr4pRoW58b7c0tH
         MbCytopbYIXtCP0PAx+gG674W63Jds7pHN0OcGh8erK4ZZ3Taq/IfeA8T760TVHAEYr1
         yprKOxRyah+bQl4HT+tk841cDWx3BeWxVW3M5vrOXDekyUNPZXsS5iW5Oe7SbJIX1Uet
         9VjQ==
X-Gm-Message-State: APjAAAWu7ZzSzs53n401hcUqrmMbrUT6RfWSNrEOmNafrQvxl+/Pblfq
        FPFiefQzOjcKUcl1vdLyNZVq5T9elBavP1Z8p1MQvpLWnxmC+HsdmLy1DnWkL0MdcELuu/d7c93
        pvwqvrl2nnMwUVw1nWspIn9CExn0rBwg30BjBZ3uoHY3oHH3GSR7gBuc0tXYdT8c=
X-Google-Smtp-Source: 
 APXvYqzHMXeXk+R4MexKTqekddc0zs/gRpisGmWPGWubNFmwXSBkPGfHS1rCFcmQEvovkGPBsmrcNMKmjVa46g==
X-Received: by 2002:a63:66c4:: with SMTP id a187mr521466pgc.85.1569456272991;
 Wed, 25 Sep 2019 17:04:32 -0700 (PDT)
Date: Wed, 25 Sep 2019 17:04:18 -0700
In-Reply-To: <20190926000418.115956-1-jmattson@google.com>
Message-Id: <20190926000418.115956-2-jmattson@google.com>
Mime-Version: 1.0
References: <20190926000418.115956-1-jmattson@google.com>
X-Mailer: git-send-email 2.23.0.351.gc4317032e6-goog
Subject: [PATCH 2/2] kvm: x86: Use AMD CPUID semantics for AMD vCPUs
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Jim Mattson <jmattson@google.com>, Marc Orr <marcorr@google.com>,
        Peter Shier <pshier@google.com>,
        Jacob Xu <jacobhxu@google.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Paolo Bonzini <pbonzini@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

When the guest CPUID information represents an AMD vCPU, return all
zeroes for queries of undefined CPUID leaves, whether or not they are
in range.

Signed-off-by: Jim Mattson <jmattson@google.com>
Fixes: bd22f5cfcfe8f6 ("KVM: move and fix substitue search for missing CPUID entries")
Reviewed-by: Marc Orr <marcorr@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
Reviewed-by: Jacob Xu <jacobhxu@google.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
---
 arch/x86/kvm/cpuid.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kvm/cpuid.c b/arch/x86/kvm/cpuid.c
index 35e2f930a4b79..0377d2820a7aa 100644
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -988,9 +988,11 @@ bool kvm_cpuid(struct kvm_vcpu *vcpu, u32 *eax, u32 *ebx,
 	/*
 	 * Intel CPUID semantics treats any query for an out-of-range
 	 * leaf as if the highest basic leaf (i.e. CPUID.0H:EAX) were
-	 * requested.
+	 * requested. AMD CPUID semantics returns all zeroes for any
+	 * undefined leaf, whether or not the leaf is in range.
 	 */
-	if (!entry && check_limit && !cpuid_function_in_range(vcpu, function)) {
+	if (!entry && check_limit && !guest_cpuid_is_amd(vcpu) &&
+	    !cpuid_function_in_range(vcpu, function)) {
 		max = kvm_find_cpuid_entry(vcpu, 0, 0);
 		if (max) {
 			function = max->eax;
