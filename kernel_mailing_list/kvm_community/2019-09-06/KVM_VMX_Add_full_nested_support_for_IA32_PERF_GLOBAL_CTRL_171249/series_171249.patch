From patchwork Fri Sep  6 21:03:05 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136059
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id AB1D41599
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:25 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 8DD122178F
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:25 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="eQfLtdvR"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389254AbfIFVDY (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:24 -0400
Received: from mail-pf1-f201.google.com ([209.85.210.201]:55779 "EHLO
        mail-pf1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725872AbfIFVDY (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:24 -0400
Received: by mail-pf1-f201.google.com with SMTP id w126so4233465pfd.22
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=CNdrlb0ULLVdEI+amDkztM5kVgEihq12ic/7nJruJWA=;
        b=eQfLtdvRyr1zcRwiuY/gGorUEG/JtUGoXsYHtT760bxrpeVvhvwIZpAiedupv8u9eg
         Rpt+Du45VehsyyTfohyp4Mi+qgArouJaudAkf7maOixuKTwqfW8EJZoRWSY958De95sI
         wzCyzmtG5S6F7IDZRnViUQojSMhvN7J0KkZrHxPKb6fshTEbkhVwrsZeTbhIjiNi1wYB
         amHtYP3/Len52v57QMfYA+msg8c157rIVhlYcpFDlXyCwhXRqni+3gux0rcSFJkx8Nq9
         wFWBLgtlORbvAIIFaXde/xgflOUREqGP7ddW5wFL9wfZy2XpxABtNmoglZaWthi59BSi
         cLSA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=CNdrlb0ULLVdEI+amDkztM5kVgEihq12ic/7nJruJWA=;
        b=HS6WsDn1IlVnz5JWMoWUjXnBXFIvo2+maDswhQSK8fWmzUVsqhKlSfE+vuWWd70Vli
         GNqaEe6wvkrGjoG8lgFEhaBPcraXwue5fHGlVxVz9gMa6e5qM2XmZKLBjJRbDMrYcZt/
         xH5pJFVMOr5KkmHM7/dGZ1OKLqZhBNv8vGwkz+HuteZBO3mhGsxXjcSbDmUa3E2/UsaV
         6HGRlDsPWFnqEv9/xp7NNRZOL1q6xRQf/Gp+KIrSfutR2jUzz6lxk9gBj8AYutEV5T+r
         /r5rjVECuVRBPiKyB8y+h//LvbZjWcK1X2XrchVkHoauV98t06qA2/4osKNL3kXBIVdK
         CJKg==
X-Gm-Message-State: APjAAAW04Q3K8KEyYzAV1Xae/uNjS9JVCpyObn6HSpTvPuzbLuhw9vfg
        NDgNxD+oSRb82uKOT/YtP3kDWczHerMzq7Pl6kKoOsgv73aBGVycmprUst5lenx9cgFXu0Ljn/X
        mpGOvr+KmjWwyAAggVgEv/q9wW2CCuc8Dm5MKoZCxUxAfFGT8e8V8he8FIA==
X-Google-Smtp-Source: 
 APXvYqxal6kWb12vc5ZYGfvikIizmgLlOf/F6n8mtymbjl8QQRHHARbD3za9szERunWq135iI4LNGp0Ygrc=
X-Received: by 2002:a63:b919:: with SMTP id z25mr9563029pge.201.1567803803148;
 Fri, 06 Sep 2019 14:03:23 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:05 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-2-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [PATCH v4 1/9] KVM: nVMX: Use kvm_set_msr to load
 IA32_PERF_GLOBAL_CTRL
 on vmexit
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The existing implementation for loading the IA32_PERF_GLOBAL_CTRL MSR
on VM-exit was incorrect, as the next call to atomic_switch_perf_msrs()
could cause this value to be overwritten. Instead, call kvm_set_msr()
which will allow atomic_switch_perf_msrs() to correctly set the values.

Suggested-by: Jim Mattson <jmattson@google.com>
Co-developed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Oliver Upton <oupton@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
---
 arch/x86/kvm/vmx/nested.c | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/arch/x86/kvm/vmx/nested.c b/arch/x86/kvm/vmx/nested.c
index ced9fba32598..b0ca34bf4d21 100644
--- a/arch/x86/kvm/vmx/nested.c
+++ b/arch/x86/kvm/vmx/nested.c
@@ -3724,6 +3724,7 @@ static void load_vmcs12_host_state(struct kvm_vcpu *vcpu,
 				   struct vmcs12 *vmcs12)
 {
 	struct kvm_segment seg;
+	struct msr_data msr_info;
 	u32 entry_failure_code;
 
 	if (vmcs12->vm_exit_controls & VM_EXIT_LOAD_IA32_EFER)
@@ -3800,9 +3801,15 @@ static void load_vmcs12_host_state(struct kvm_vcpu *vcpu,
 		vmcs_write64(GUEST_IA32_PAT, vmcs12->host_ia32_pat);
 		vcpu->arch.pat = vmcs12->host_ia32_pat;
 	}
-	if (vmcs12->vm_exit_controls & VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL)
-		vmcs_write64(GUEST_IA32_PERF_GLOBAL_CTRL,
-			vmcs12->host_ia32_perf_global_ctrl);
+	if (vmcs12->vm_exit_controls & VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL) {
+		msr_info.host_initiated = false;
+		msr_info.index = MSR_CORE_PERF_GLOBAL_CTRL;
+		msr_info.data = vmcs12->host_ia32_perf_global_ctrl;
+		if (kvm_set_msr(vcpu, &msr_info))
+			pr_debug_ratelimited(
+				"%s cannot write MSR (0x%x, 0x%llx)\n",
+				__func__, msr_info.index, msr_info.data);
+	}
 
 	/* Set L1 segment info according to Intel SDM
 	    27.5.2 Loading Host Segment and Descriptor-Table Registers */

From patchwork Fri Sep  6 21:03:06 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136061
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 4D0171599
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:28 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 2F91A2178F
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:28 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="Wpc0JhFK"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389682AbfIFVD1 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:27 -0400
Received: from mail-pg1-f202.google.com ([209.85.215.202]:41902 "EHLO
        mail-pg1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2389219AbfIFVD0 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:26 -0400
Received: by mail-pg1-f202.google.com with SMTP id b18so4069510pgg.8
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:26 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=rIn9NPomClL1C1oR3Sx9MHzrgkplOyHVIQJ1ZFuFtgk=;
        b=Wpc0JhFKhKf2jELl00nIWioGMa0TuumuUqIOxwZWJ5qRS7GI6xjZn7htlgZwZzcg/p
         cOzD/tqnhgfS9sgUp7Gv3rwHpZu9DEXDvdP/RJGMTCAtidYkopO37e2oS7AmgAf2cYRl
         7XVLAYcgMeBuAu0L23OIAX0D41b7mZ8xV9oEiKjo+5fkkrv6MX3c4xWJ5bhhk+JFjLjd
         z1Xlt440va2e+Cl7ILatq1+zz2ccB/C0Fm4OvIcBPnPYR+mdiKbexdk0gjAFFXXX9Bxw
         tfUyt7I7VU4GGgqooK7yvyl1VTyPw9QJRcy71m/JHoIvjDh+RgXQ3OnJSRA5ObuzRCPF
         GFKw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=rIn9NPomClL1C1oR3Sx9MHzrgkplOyHVIQJ1ZFuFtgk=;
        b=G3wHBuFe5xQI0DcJAFuCvJ1wxyq1R7TGBVRR/svhsXLeDjdFOlOGUUXjV083d2xXIC
         AMw+5Qhlm+lh+G9jUDbRbOc5LwxEw5aRf452wucb/daPxTFIwf14RqerLqLNu7ktDktZ
         NTWOElgzJqb8xNi0CTLMFmCpMsnlCY1/VHN8s/v16MO4wihCPHRgYoX5TcvLIV5RLEDD
         Qg4zizrduq8u/hOr1wzWY2iezpWSTdbaAC8EVd0sZf8vOGMyaaJHkqvrdzQYndux8V6d
         JMH5amE1sBk+PC/J1qxVgzwUUaa5Rycz6iO2g6/yLt+xG53MHqlqNvknOun7kZFCDije
         tyHw==
X-Gm-Message-State: APjAAAV4Ea5hcCmAmHrKj/RKiMoRePc5lRiCDJZAgaW31mV+YiuXXW+l
        PX6tiUfK8UXHXj2XDAPmOttnHvLg6DKuncH/D0WQpVDVo5T8yL3JOP8X/NigbZeLbClpTj0t3dq
        eW33q7B6AuAeuyoAkcsmdKV7r8AMxlN8+grEBDJ/53ddtfmqAI20FkC+f9g==
X-Google-Smtp-Source: 
 APXvYqygPzW1l5uTdUKeMI1Pnj+mb6YzqUmAc9BbGV1djyKuVgOdZYM1b1kcZBh8tGCiCthy0YOLQUKCTQ4=
X-Received: by 2002:a65:6093:: with SMTP id t19mr9679273pgu.79.1567803805621;
 Fri, 06 Sep 2019 14:03:25 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:06 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-3-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [PATCH v4 2/9] KVM: nVMX: Load GUEST_IA32_PERF_GLOBAL_CTRL MSR on
 vm-entry
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Add condition to prepare_vmcs02 which loads IA32_PERF_GLOBAL_CTRL on
VM-entry if the "load IA32_PERF_GLOBAL_CTRL" bit on the VM-entry control
is set. Use kvm_set_msr() rather than directly writing to the field to
avoid overwrite by atomic_switch_perf_msrs().

Suggested-by: Jim Mattson <jmattson@google.com>
Co-developed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Oliver Upton <oupton@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
---
 arch/x86/kvm/vmx/nested.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/arch/x86/kvm/vmx/nested.c b/arch/x86/kvm/vmx/nested.c
index b0ca34bf4d21..9ba90b38d74b 100644
--- a/arch/x86/kvm/vmx/nested.c
+++ b/arch/x86/kvm/vmx/nested.c
@@ -2281,6 +2281,7 @@ static int prepare_vmcs02(struct kvm_vcpu *vcpu, struct vmcs12 *vmcs12,
 {
 	struct vcpu_vmx *vmx = to_vmx(vcpu);
 	struct hv_enlightened_vmcs *hv_evmcs = vmx->nested.hv_evmcs;
+	struct msr_data msr_info;
 	bool load_guest_pdptrs_vmcs12 = false;
 
 	if (vmx->nested.dirty_vmcs12 || hv_evmcs) {
@@ -2404,6 +2405,16 @@ static int prepare_vmcs02(struct kvm_vcpu *vcpu, struct vmcs12 *vmcs12,
 	if (!enable_ept)
 		vcpu->arch.walk_mmu->inject_page_fault = vmx_inject_page_fault_nested;
 
+	if (vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_PERF_GLOBAL_CTRL) {
+		msr_info.host_initiated = false;
+		msr_info.index = MSR_CORE_PERF_GLOBAL_CTRL;
+		msr_info.data = vmcs12->guest_ia32_perf_global_ctrl;
+		if (kvm_set_msr(vcpu, &msr_info))
+			pr_debug_ratelimited(
+				"%s cannot write MSR (0x%x, 0x%llx)\n",
+				__func__, msr_info.index, msr_info.data);
+	}
+
 	kvm_rsp_write(vcpu, vmcs12->guest_rsp);
 	kvm_rip_write(vcpu, vmcs12->guest_rip);
 	return 0;

From patchwork Fri Sep  6 21:03:07 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136063
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 8BDB413BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:30 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 6E15C2178F
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:30 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="fNtYv29/"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389219AbfIFVD3 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:29 -0400
Received: from mail-pl1-f201.google.com ([209.85.214.201]:42829 "EHLO
        mail-pl1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2388923AbfIFVD3 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:29 -0400
Received: by mail-pl1-f201.google.com with SMTP id t10so4243993plr.9
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:28 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=pvy5xBJ4sVR8VVUN06klRrkN6IdSpm4Xfk2m+Gn3e8g=;
        b=fNtYv29/D3+jlMDwGuX3KwyxRK4HvPN2dgMwPWy/dhR6W6+lstdOMjCSKcLufGW/5P
         2fhMCnx5zDfIMAJZRnBz3gRtokSR0XQCEEHyux7ko69Jtj06H1RNLa/wOt4VpeOQvEOK
         0dTctUXxM9CxGnGX8J4nKGS/knFcE9g4RJqkwRRuONJzPay/5wL+irQfbYwysWenqudm
         JNpBUesoT82CyofUsEcUEvyrHlsiu32F1a0ytYYm6tb2qInpIAEChv5hnKMFjskur9cu
         pYkrPId0Ygx7KyWPVNWwlzO83tKvKdgqYM5pu0hUUV0MtdH5lpYkJdjyDIk7wD5eanTq
         Bjbg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=pvy5xBJ4sVR8VVUN06klRrkN6IdSpm4Xfk2m+Gn3e8g=;
        b=c1UjQS6AO/Gbpnzd95SC97Vj6cVGcFJ8KnrA9tZOScsfRjR444kcnqvj7tZrWzRE4P
         9nuiF1TJ0vWuwl8ug5wYT083C0TslgKxxs9SoMTRtsbYDy0GKbeicXgRrCrJOpzg4WSn
         LrjWJJEFObxOGBtB3GkJDE5DaEcnkRtdBaT0SlJT/g69BqlGj2jEdE2Wr7QUNT1dclq1
         3xDlr3vqUB1G7gCzQ/GzUBaD8cczG0/izwiSOhqDmmz+RJpVW+zkao1UrYcg95wYrjXd
         Gb04SkanTR6zXHTuvyDdRq1NZKuL9YQikjy6f9XmgcjH5Bhj7T9Lte0evwSF0r98jvKk
         UyQw==
X-Gm-Message-State: APjAAAU4WcrK/mIdktVBMz5FZz1AleK/cXNnQ7z+iTOXTvIWUD0eK/Yg
        DXxpYY1ZYFn2lefseHK4uRZMtJi+R1K2WBOCrrVT9DE9wCtUoEZY1q8qzl2KHQppOU/e+Wjd1N7
        CT5h9ItNRvB274jv9zQ9vAI8k1JGDgk3gpwMdKMOnzRH2+JeIw+QROPzceg==
X-Google-Smtp-Source: 
 APXvYqw5+ungzeO2AZZITfA/X0xpNayQnD4Xft7LFpZiqOVerqGky5jL6Zk/BhsVgdmunreAarpEuKdpsgE=
X-Received: by 2002:a63:9e54:: with SMTP id r20mr9984312pgo.64.1567803807897;
 Fri, 06 Sep 2019 14:03:27 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:07 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-4-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [PATCH v4 3/9] KVM: VMX: Add helper to check reserved bits in
 IA32_PERF_GLOBAL_CTRL
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Create a helper function to check the validity of a proposed value for
IA32_PERF_GLOBAL_CTRL from the existing check in intel_pmu_set_msr().

Per Intel's SDM, the reserved bits in IA32_PERF_GLOBAL_CTRL must be
cleared for the corresponding host/guest state fields.

Suggested-by: Jim Mattson <jmattson@google.com>
Co-developed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Oliver Upton <oupton@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
---
 arch/x86/kvm/pmu.h           | 6 ++++++
 arch/x86/kvm/vmx/pmu_intel.c | 2 +-
 2 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/arch/x86/kvm/pmu.h b/arch/x86/kvm/pmu.h
index 58265f761c3b..67a0f6da567c 100644
--- a/arch/x86/kvm/pmu.h
+++ b/arch/x86/kvm/pmu.h
@@ -79,6 +79,12 @@ static inline bool pmc_is_enabled(struct kvm_pmc *pmc)
 	return kvm_x86_ops->pmu_ops->pmc_is_enabled(pmc);
 }
 
+static inline bool kvm_is_valid_perf_global_ctrl(struct kvm_pmu *pmu,
+						 u64 data)
+{
+	return !(pmu->global_ctrl_mask & data);
+}
+
 /* returns general purpose PMC with the specified MSR. Note that it can be
  * used for both PERFCTRn and EVNTSELn; that is why it accepts base as a
  * paramenter to tell them apart.
diff --git a/arch/x86/kvm/vmx/pmu_intel.c b/arch/x86/kvm/vmx/pmu_intel.c
index 4dea0e0e7e39..963766d631ad 100644
--- a/arch/x86/kvm/vmx/pmu_intel.c
+++ b/arch/x86/kvm/vmx/pmu_intel.c
@@ -223,7 +223,7 @@ static int intel_pmu_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 	case MSR_CORE_PERF_GLOBAL_CTRL:
 		if (pmu->global_ctrl == data)
 			return 0;
-		if (!(data & pmu->global_ctrl_mask)) {
+		if (kvm_is_valid_perf_global_ctrl(pmu, data)) {
 			global_ctrl_changed(pmu, data);
 			return 0;
 		}

From patchwork Fri Sep  6 21:03:08 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136065
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id A9DF013BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:32 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 8C9C22173E
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:32 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="vcIEhH0b"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390140AbfIFVDb (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:31 -0400
Received: from mail-pl1-f202.google.com ([209.85.214.202]:39609 "EHLO
        mail-pl1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2389992AbfIFVDb (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:31 -0400
Received: by mail-pl1-f202.google.com with SMTP id d11so4239035plo.6
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=F82gU2FvtpQ8URB34nFaQufQUb4iZ46jG4tIG0b8NEE=;
        b=vcIEhH0bWHonZUSACAHDEgBUk4gdUuZgZQuCGej8/RnTqK/SjI/X1YIxXUJNZ+SZq+
         QpK3kElpES3fGbE3vU1/TOQQ3u+AisKg5NVQs2ZzafInDrLPB14dEJvViIcdisk+xjAh
         HyOOxn5tRx3baXw5+Tw6DmGRFGyzWaLtbUZBDDyZuwKAIib1YrnnnCA0qrZqTQBSggP5
         4kYbtZ+KcKlxbKMo4wbfZr3RxLRulwCZWNZ7yeWavKPdzXP3ACsTuHiQAOwnsG6UgqbM
         5ipnlxuE7lpOQQ1o3IInGVlJ6fEmhrHzSYBvKvqb3XzikZNCkig6tZHSqHrwcoHWVOu7
         xojA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=F82gU2FvtpQ8URB34nFaQufQUb4iZ46jG4tIG0b8NEE=;
        b=P/kFzM+A/FRk4ertdUHivtFPRHA6B1E9j03pDJH/tHR+xntNtJDSudCEwlFlkIAGaf
         5PwwTs8v3DIlfr9LcHwMLfXugO+Y4vL5sMxtLqpfmawOmT7E592NTghjKWHCKoToqruq
         eQ5Krou+A0vTwanyt3zlpW+kcIxK1oG0YXu1RpH1d1pclQmTu/t2TenDeqx7+ab8g9o8
         JjheZI1WxArxaHPit9dmCxfIvp9fiykMvzFqLASgwnfjaHdntdWEfIiWwLcw8+lwjpSi
         Ra8gfq1h9k1JG8NQ68HgVEYo2GcZWj8/mZ5j0CzlMpwPvd3kO4JY2EsHf+Zmd8S5dVf3
         WV6g==
X-Gm-Message-State: APjAAAUOFZgF2Fd1HzhQe892LT6C/1ryM9hCkFMARjYb1u9C8wP5TtTj
        zRC4b9k3bxKWIAuxM5rnmPvIewMXg4cxehxk3Ocj6zr+xVxCJCDeBYNu88y25IS3YlAqkdOagC0
        nmmEf45Bb+V0C3Ocdk4fVbrxBb36KMO5MSsKZpfoSk2rzcqAZWWaX4v7GgQ==
X-Google-Smtp-Source: 
 APXvYqwsQXEI2CotXMMd67Xi5BiQT5CnPI3FqossniK+/WqVymBFzubR/kFmEHB8t2j/fn+EV1+GrUPsGT0=
X-Received: by 2002:a65:68c9:: with SMTP id k9mr9668492pgt.28.1567803809989;
 Fri, 06 Sep 2019 14:03:29 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:08 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-5-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [PATCH v4 4/9] KVM: nVMX: check GUEST_IA32_PERF_GLOBAL_CTRL on
 VM-Entry
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Add condition to nested_vmx_check_guest_state() to check the validity of
GUEST_IA32_PERF_GLOBAL_CTRL. Per Intel's SDM Vol 3 26.3.1.1:

  If the "load IA32_PERF_GLOBAL_CTRL" VM-entry control is 1, bits
  reserved in the IA32_PERF_GLOBAL_CTRL MSR must be 0 in the field for that
  register.

Suggested-by: Jim Mattson <jmattson@google.com>
Co-developed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Oliver Upton <oupton@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
---
 arch/x86/kvm/vmx/nested.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/arch/x86/kvm/vmx/nested.c b/arch/x86/kvm/vmx/nested.c
index 9ba90b38d74b..6c3aa3bcede3 100644
--- a/arch/x86/kvm/vmx/nested.c
+++ b/arch/x86/kvm/vmx/nested.c
@@ -10,6 +10,7 @@
 #include "hyperv.h"
 #include "mmu.h"
 #include "nested.h"
+#include "pmu.h"
 #include "trace.h"
 #include "x86.h"
 
@@ -2732,6 +2733,7 @@ static int nested_vmx_check_guest_state(struct kvm_vcpu *vcpu,
 					u32 *exit_qual)
 {
 	bool ia32e;
+	struct kvm_pmu *pmu = vcpu_to_pmu(vcpu);
 
 	*exit_qual = ENTRY_FAIL_DEFAULT;
 
@@ -2748,6 +2750,11 @@ static int nested_vmx_check_guest_state(struct kvm_vcpu *vcpu,
 		return -EINVAL;
 	}
 
+	if (vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_PERF_GLOBAL_CTRL &&
+	    !kvm_is_valid_perf_global_ctrl(pmu,
+					   vmcs12->guest_ia32_perf_global_ctrl))
+		return -EINVAL;
+
 	/*
 	 * If the load IA32_EFER VM-entry control is 1, the following checks
 	 * are performed on the field for the IA32_EFER MSR:

From patchwork Fri Sep  6 21:03:09 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136067
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 178CC1708
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:35 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id EF2A92173E
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:34 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="M5CwszVm"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390220AbfIFVDe (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:34 -0400
Received: from mail-vk1-f201.google.com ([209.85.221.201]:40994 "EHLO
        mail-vk1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2389992AbfIFVDd (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:33 -0400
Received: by mail-vk1-f201.google.com with SMTP id g11so2905682vkm.8
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=dD9/QUSmDVRmfW0CVBGqk/cZBNT81Sw0iddXqsAQmTY=;
        b=M5CwszVmgz+Bt5N6QVnMzVxf6VoUJJWGtB83ZktLk8efqkccfcpdXKNjHK4ZHNs3h4
         /Q4FsDolFe5e3XW71ZvtoHPoKv1lqSWqEX+AWYO//YL1sPpvaA3iHToI+kLDPcsKFzwE
         F3X1dmywF1M0Y8i32BeFXI9Mr4BwFPm1gcLHde3VN/GCeJc2dNl5OIpfOMijnWZ8xGb1
         KqRwh+Sp3ZpL9nUo+de5C681HmCp+XtaRwBj3mGJldHPXDnURlG3+hClvKQbFV4NaRNf
         Tv5zQSoZQb3CiFXkbcNqF5uy+SFpEpdNr8OEzqgNXgws77NL0Wp9nZ0hMy3cPkFsITTw
         GZTw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=dD9/QUSmDVRmfW0CVBGqk/cZBNT81Sw0iddXqsAQmTY=;
        b=sTdCt6XPqJVhGD4WF1rd4q5BSE9VTJuc2d5/C8lcMkyp29YWgBkGU5iqhByvfuxmfy
         druKU6oFy9dopcLS4O4+cdh0FTtR76bj6Oh5z5nmmQT5+In3CD8OSQGeGpl+wTocXwdC
         iXVJhyJK4sjVdRmK8CGbVBjGq7F3DCumARr6P9wDkATHG+MCosD1L+Eu6+dhhRDhuazO
         DKMF280d8GPv2yli+Rt2SJ7l7DrStBQ8HaQopH74TPlxE2UsJZlix0vmGivgtBKcs7dk
         TAEpFIRBun8yroHP24fsR1FGUk0hMeNluznqVumchCq29e5b5r3Qsw0qz6Q0qaTk6Bck
         lWYA==
X-Gm-Message-State: APjAAAVINiCAivlQPb7bnTh8UUXBk729ll+qq4savmme7weovdDO8lrS
        coJi70lptMY/6EEyx3faXynjF8xoych5Hn5urt63pHvFL70ykw7nUQ9NI+0wyK0eRSGE0po1adO
        noN4BNiRBjG5gnJMbpocJB8vmBFifzd7TdUuMqGfmhwXCxG9RIsOLD/sIsg==
X-Google-Smtp-Source: 
 APXvYqwfb1dirayUPI07Y7v5vtb7lFJuHxddFuQJveMdvRiQCUCpayDXnSsDHWGDYZlDcHjr2z7sbhY9C0M=
X-Received: by 2002:a1f:b994:: with SMTP id j142mr5569970vkf.62.1567803812447;
 Fri, 06 Sep 2019 14:03:32 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:09 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-6-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [PATCH v4 5/9] KVM: nVMX: Check HOST_IA32_PERF_GLOBAL_CTRL on
 VM-entry
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Add a consistency check on nested vm-entry for host's
IA32_PERF_GLOBAL_CTRL from vmcs12. Per Intel's SDM Vol 3 26.2.2:

  If the "load IA32_PERF_GLOBAL_CTRL"
  VM-exit control is 1, bits reserved in the IA32_PERF_GLOBAL_CTRL
  MSR must be 0 in the field for that register"

Suggested-by: Jim Mattson <jmattson@google.com>
Co-developed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Oliver Upton <oupton@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
---
 arch/x86/kvm/vmx/nested.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/arch/x86/kvm/vmx/nested.c b/arch/x86/kvm/vmx/nested.c
index 6c3aa3bcede3..e2baa9ca562f 100644
--- a/arch/x86/kvm/vmx/nested.c
+++ b/arch/x86/kvm/vmx/nested.c
@@ -2636,6 +2636,7 @@ static int nested_vmx_check_host_state(struct kvm_vcpu *vcpu,
 				       struct vmcs12 *vmcs12)
 {
 	bool ia32e;
+	struct kvm_pmu *pmu = vcpu_to_pmu(vcpu);
 
 	if (!nested_host_cr0_valid(vcpu, vmcs12->host_cr0) ||
 	    !nested_host_cr4_valid(vcpu, vmcs12->host_cr4) ||
@@ -2650,6 +2651,11 @@ static int nested_vmx_check_host_state(struct kvm_vcpu *vcpu,
 	    !kvm_pat_valid(vmcs12->host_ia32_pat))
 		return -EINVAL;
 
+	if (vmcs12->vm_exit_controls & VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL &&
+	    !kvm_is_valid_perf_global_ctrl(pmu,
+					   vmcs12->host_ia32_perf_global_ctrl))
+		return -EINVAL;
+
 	ia32e = (vmcs12->vm_exit_controls &
 		 VM_EXIT_HOST_ADDR_SPACE_SIZE) != 0;
 

From patchwork Fri Sep  6 21:03:10 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136069
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 67DB11599
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:37 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 4A4552178F
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:37 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="hhESJAZv"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390242AbfIFVDg (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:36 -0400
Received: from mail-pl1-f201.google.com ([209.85.214.201]:43365 "EHLO
        mail-pl1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2389873AbfIFVDg (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:36 -0400
Received: by mail-pl1-f201.google.com with SMTP id y6so4232117plt.10
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=rCyhoUdaGrgN67UpXBGLGCttQlRMLbm+Q6DEjZauY84=;
        b=hhESJAZvy2HG7/31mOJLJuvF+Ps6wzjzmmeuX3qtBzFGL8q2UA1Z8PWr8kNg2yFmSC
         8JxY/Z77JU2EbIRPiBK/YrPX91nwrczc6E5MgX+LjRhFiRomLXHhJ3j11ctH2+XBfsSV
         PWig60VXsO4NCBG2soNeUYVKydwtA1sgG5I/lAOft1MoVt5E6wlerflIe4B8ylvvoPHq
         Kyx9BoR5JPcZQXhOPdZhQkB7+Sx/sbWEWd8bORtEeYZC6OSXcuWw7yjigzepz2ijTYxY
         6nEF3xCxp949vyHcDR3XzcLnCpedb+uQkR17L8pUx5isVyFyMK5EiJ4nscDa4CU1NVBm
         Vw5w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=rCyhoUdaGrgN67UpXBGLGCttQlRMLbm+Q6DEjZauY84=;
        b=emu6nq0XDfP33gPRspik7S9v5O/2dbUxJIgiL63+5qX4AiBwT079ng1VbWswQM9Xfv
         LaS7UmacpxD1bQpgXEhM9JuUBvt3Nod+rjmgH9QJuwJQ9RZXyWrq7guu23jhMd1nOPUG
         ykHvi0fFlVvzZl7SWkCaFQnD/aa/WNRdQi11ZDyvAsbavVQBS0b6sqqqhRwdFbfz2T8U
         WWknQ2JevSdgwZz38XVOMhbduUCHoYWGF1cTn5yWrlvMjl4WhAqm7/beCJDBIXGBRwZ+
         FVefLmiPWWifRfoyeRUMz53iFiERq6qP1thcCiBBth3GP3I9ngqEQ0caODuEqxX7urFS
         lsZg==
X-Gm-Message-State: APjAAAW7loop4FkcF7IL3J31bz9hDrc/AKM7RrS1LDsXz9jiEkcCOOHb
        wvjLpXnjJYgxeAZBpUlmzP3xXxiIXv3aqKqXRQCO496KAG9Oy0do0Xh5lY6ps2OWvbPf31NHLkW
        l3BNUQQMGO1hX18VfcObJoh6qFRkOfAu+6cf4pEHoOjFNLwpCF/6Ic3fdYg==
X-Google-Smtp-Source: 
 APXvYqxBq39FP9hTwCe1ZG+9e4AU8CuDz+HMenwLIQ0RgG+MBLBYB583zs0OhmyElHLn19ewUTSLWGthJNw=
X-Received: by 2002:a65:6108:: with SMTP id z8mr9630680pgu.289.1567803814582;
 Fri, 06 Sep 2019 14:03:34 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:10 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-7-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [PATCH v4 6/9] KVM: nVMX: Expose load IA32_PERF_GLOBAL_CTRL vm
 control if supported
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The "load IA32_PERF_GLOBAL_CTRL" bit for VM-entry and VM-exit should
only be exposed to the guest if IA32_PERF_GLOBAL_CTRL is a valid MSR.
Create a new helper to allow pmu_refresh() to update the VM-entry and
VM-exit controls to ensure PMU values are initialized when performing
the is_valid_msr() check.

Suggested-by: Jim Mattson <jmattson@google.com>
Co-developed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Oliver Upton <oupton@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
---
 arch/x86/kvm/vmx/pmu_intel.c |  3 +++
 arch/x86/kvm/vmx/vmx.c       | 21 +++++++++++++++++++++
 arch/x86/kvm/vmx/vmx.h       |  1 +
 3 files changed, 25 insertions(+)

diff --git a/arch/x86/kvm/vmx/pmu_intel.c b/arch/x86/kvm/vmx/pmu_intel.c
index 963766d631ad..2dc7be724321 100644
--- a/arch/x86/kvm/vmx/pmu_intel.c
+++ b/arch/x86/kvm/vmx/pmu_intel.c
@@ -16,6 +16,7 @@
 #include "cpuid.h"
 #include "lapic.h"
 #include "pmu.h"
+#include "vmx.h"
 
 static struct kvm_event_hw_type_mapping intel_arch_events[] = {
 	/* Index must match CPUID 0x0A.EBX bit vector */
@@ -314,6 +315,8 @@ static void intel_pmu_refresh(struct kvm_vcpu *vcpu)
 	    (boot_cpu_has(X86_FEATURE_HLE) || boot_cpu_has(X86_FEATURE_RTM)) &&
 	    (entry->ebx & (X86_FEATURE_HLE|X86_FEATURE_RTM)))
 		pmu->reserved_bits ^= HSW_IN_TX|HSW_IN_TX_CHECKPOINTED;
+
+	nested_vmx_pmu_entry_exit_ctls_update(vcpu);
 }
 
 static void intel_pmu_init(struct kvm_vcpu *vcpu)
diff --git a/arch/x86/kvm/vmx/vmx.c b/arch/x86/kvm/vmx/vmx.c
index 570a233e272b..5b0664bff23b 100644
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -6417,6 +6417,27 @@ void vmx_update_host_rsp(struct vcpu_vmx *vmx, unsigned long host_rsp)
 	}
 }
 
+void nested_vmx_pmu_entry_exit_ctls_update(struct kvm_vcpu *vcpu)
+{
+	struct vcpu_vmx *vmx;
+
+	if (!nested_vmx_allowed(vcpu))
+		return;
+
+	vmx = to_vmx(vcpu);
+	if (intel_pmu_ops.is_valid_msr(vcpu, MSR_CORE_PERF_GLOBAL_CTRL)) {
+		vmx->nested.msrs.entry_ctls_high |=
+				VM_ENTRY_LOAD_IA32_PERF_GLOBAL_CTRL;
+		vmx->nested.msrs.exit_ctls_high |=
+				VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL;
+	} else {
+		vmx->nested.msrs.entry_ctls_high &=
+				~VM_ENTRY_LOAD_IA32_PERF_GLOBAL_CTRL;
+		vmx->nested.msrs.exit_ctls_high &=
+				~VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL;
+	}
+}
+
 bool __vmx_vcpu_run(struct vcpu_vmx *vmx, unsigned long *regs, bool launched);
 
 static void vmx_vcpu_run(struct kvm_vcpu *vcpu)
diff --git a/arch/x86/kvm/vmx/vmx.h b/arch/x86/kvm/vmx/vmx.h
index 82d0bc3a4d52..e06884cf88ad 100644
--- a/arch/x86/kvm/vmx/vmx.h
+++ b/arch/x86/kvm/vmx/vmx.h
@@ -331,6 +331,7 @@ void vmx_set_virtual_apic_mode(struct kvm_vcpu *vcpu);
 struct shared_msr_entry *find_msr_entry(struct vcpu_vmx *vmx, u32 msr);
 void pt_update_intercept_for_msr(struct vcpu_vmx *vmx);
 void vmx_update_host_rsp(struct vcpu_vmx *vmx, unsigned long host_rsp);
+void nested_vmx_pmu_entry_exit_ctls_update(struct kvm_vcpu *vcpu);
 
 #define POSTED_INTR_ON  0
 #define POSTED_INTR_SN  1

From patchwork Fri Sep  6 21:03:11 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136071
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 8796113BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:39 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 6AE852178F
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:39 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="A+7hjrdF"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390726AbfIFVDi (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:38 -0400
Received: from mail-pf1-f202.google.com ([209.85.210.202]:39613 "EHLO
        mail-pf1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2390367AbfIFVDi (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:38 -0400
Received: by mail-pf1-f202.google.com with SMTP id n186so5516148pfn.6
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=E3INAiH7EAqRlDXl9ihNS8SQNTvURjPeKhaz0/tf9Mg=;
        b=A+7hjrdFoAbeMivWPApH9FdJUVJjKoQNJzi0vco2ZVK3Lb3smVuCtZGQAwvORBBMni
         Bvw+H5zfQUNfq1hCQ+6lL5dfpFJTjKf2VMcf17zEC8qBiM79v2I5ZLLe4A3ITQ0DS31t
         oMEFTmYwUIVw1zhydMWKow/iJsjQE4hct1MtDScR9g0Ekva23B8uQM5S+yPFsCFJHvo1
         4ZFZzZ6O+3HJJGbir4i1OouZjD3v3SpCCrqxXXXayhBTxLPuA3DIDAZrcUTDAuPcWuWC
         yNEB0FlO2p8AXKhCe7mB2oCKrpBh92vAuPdE+p8phjfBFuXJQ9EVjQk2pJTjZPJpnDb4
         ohKw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=E3INAiH7EAqRlDXl9ihNS8SQNTvURjPeKhaz0/tf9Mg=;
        b=Clnr/lyIoeYciGf+swEIrMb7EY5/QNWPHFB9CxqOj/GB7H9HIunF143Kj7anyGddbt
         lxM/pKSpqfmnenQw3ROGwxxDcZSA+dQclOcHcvCFad1twaVzvRPFbUGVtSfYRskLZQvn
         hzaDGFMQMULyB2faYGQVBYtfx773tbbhHm72jId0hie4TAjYNnFkWoEKdjpGIUDZai2z
         Nb2tJx9AhDLDxmzZns4AW334jFpxIqfNU5WrP4QCYS1fg3/LuN7xLj3tAf/7v9hK7SXj
         lZeOrLM5vI/t0PZIfIoBjfUuhWbiUzWoI29z5T6EKRgLjmc9eCpKXqX8SqFM9kK9Pz8w
         7Weg==
X-Gm-Message-State: APjAAAU1uEQSoL99siWaInuiup/jsQ2We4ol8eSJV2NBMzOWka3/sLGI
        P9w6YpxiwggyR5uAWhJTkd2HAbk4w6J8y/ViariAuIx+6CW3uTapGso7xjQjIoEF21w6azntZUt
        +YVg4P1TqxG+COmOU3GGTw1Mik6UbbgLSNA+dLCOyV6d0cVSytcAX0/Lv1Q==
X-Google-Smtp-Source: 
 APXvYqz5NgAnY67peE4dh5Ip4+ZyedJdtALkBwBciFkApWxKJFvVPZoTXlBnxdFITeAcjUeSGkSbaGH3AeY=
X-Received: by 2002:a63:205f:: with SMTP id r31mr2336839pgm.159.1567803816771;
 Fri, 06 Sep 2019 14:03:36 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:11 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-8-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [kvm-unit-test PATCH v4 7/9] vmx: Allow vmx_tests to reset the
 test_guest_func
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The guest state tests are to be grouped together under a single
vmx_test, vmx_guest_state_area_test(). However, each sub-test is an
independent test that sets up its guest. test_set_guest() only allows a
guest function to be set once in the lifetime of a vmx_test.

Add a new helper, vmx_reset_guest(), which the guest state tests may use
to set the guest function more than once. Also, this function will reset
the VMCS as if running another independent test.

Suggested-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Oliver Upton <oupton@google.com>
---
 x86/vmx.c       | 13 +++++++++++++
 x86/vmx.h       |  1 +
 x86/vmx_tests.c |  2 +-
 3 files changed, 15 insertions(+), 1 deletion(-)

diff --git a/x86/vmx.c b/x86/vmx.c
index 6079420db33a..37e31c284399 100644
--- a/x86/vmx.c
+++ b/x86/vmx.c
@@ -1772,6 +1772,19 @@ void test_set_guest(test_guest_func func)
 	v2_guest_main = func;
 }
 
+/*
+ * Reset the target for the enter_guest call, re-initialize VMCS. For tests
+ * that wish to run multiple sub-tests under the same vmx_test parent function
+ */
+void test_reset_guest(test_guest_func func)
+{
+	assert(current->v2);
+	init_vmcs(&(current->vmcs));
+	v2_guest_main = func;
+	launched = 0;
+	guest_finished = 0;
+}
+
 static void check_for_guest_termination(void)
 {
 	if (is_hypercall()) {
diff --git a/x86/vmx.h b/x86/vmx.h
index 75abf9a489dd..217114c3bf3a 100644
--- a/x86/vmx.h
+++ b/x86/vmx.h
@@ -824,6 +824,7 @@ void enter_guest_with_invalid_guest_state(void);
 typedef void (*test_guest_func)(void);
 typedef void (*test_teardown_func)(void *data);
 void test_set_guest(test_guest_func func);
+void test_reset_guest(test_guest_func func);
 void test_add_teardown(test_teardown_func func, void *data);
 void test_skip(const char *msg);
 
diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index f035f24a771a..6f46c7759c85 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -6858,7 +6858,7 @@ static void test_pat(u32 field, const char * field_name, u32 ctrl_field,
 	vmcs_clear_bits(ctrl_field, ctrl_bit);
 	if (field == GUEST_PAT) {
 		vmx_set_test_stage(1);
-		test_set_guest(guest_state_test_main);
+		test_reset_guest(guest_state_test_main);
 	}
 
 	for (i = 0; i < 256; i = (i < PAT_VAL_LIMIT) ? i + 1 : i * 2) {

From patchwork Fri Sep  6 21:03:12 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136073
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id C29021708
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:41 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A59FC2178F
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:41 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="fcK+aAHk"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390659AbfIFVDk (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:40 -0400
Received: from mail-vs1-f74.google.com ([209.85.217.74]:41204 "EHLO
        mail-vs1-f74.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2389992AbfIFVDk (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:40 -0400
Received: by mail-vs1-f74.google.com with SMTP id z10so1171524vsq.8
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=MtHBm0pGseMAAYkSQEaTbeZbYbnsK4eOlFYiZZOX+dQ=;
        b=fcK+aAHkR8sBJUMKcFcUGxb5l/t/wotm+PdMsX6pjKWKUENJH7O6FBUb/x2xeXW1Li
         ylEC3mjSzM2NUuqPs0E15sx58drIaa6mKwPaclC7usEzctYAysZ+XuLiDRHMdEgOQo6y
         DO95QL10aMbnAOh3o+r8clHCPc5YzCvVW2PM4mW85Ru3rdKekHo8YDomDuxk4cON3r5k
         hVD5yNqU+xoh7ov+DzRRyEor+VJNHJf6PadPoFmo9dUIXyyQc+x1pjBKTm8dMEmuHKSM
         6ypHd4ZkGq8oPdYN/7WpcFrwqMPMxHdMHFvdNqgjd3bsQIkiavSjT36ZnN4/RHTV+hEn
         No+w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=MtHBm0pGseMAAYkSQEaTbeZbYbnsK4eOlFYiZZOX+dQ=;
        b=bQd4oC1a5fYRCvQLCnSysTdo0jLC7Asy3lv2WQoTegDveWqX4vPQ45hm403VjwgU2p
         i4JlHDlhrVNKBfPc8yF9atUO1uBlASVb7giHd8PZRr/R91HsROxsvWiscugOT3ac6znm
         HLa5KusdSJxmr/ariqocsH7uZL4mXsZnukuQDm8xYrVYysag5yvxgtWEvIspvFTaCBCd
         yUtrBU5TL4i2uqiFye7pOGYJt4vYWUTmxMWkYXT3DnSFhEylgl/IACCyQzce1RCXxJ17
         2AS68/nIsTiwpQy5WUm7unw6mfVfW8LT6PSl7y02bxRmd1iE0KT/E9Yt2Pf/IUnrNVbT
         OWKQ==
X-Gm-Message-State: APjAAAVCiur44dE9wNBrY1BalF/J3aoMrOKJotH9YdEW+MWcwQEnOatZ
        KMMO4tJRDSpDxhJ754GQ5KfcUGtQxmCfZ21U7rMt5obDizST+yibARvr9QDz/gHemFNQaf08SKV
        qlcg7wLgndFN06E7wLrhYxThDQXu5/hlvG+C/pNkYQV+oNuYGfixv0id7yw==
X-Google-Smtp-Source: 
 APXvYqz35UE0/DzWxqG58PNyj1ppHDgRP4IXzFvWX9mKn3mnpCfx3cSr1tqEujxcCsZ31+9Hh+quXjixcwg=
X-Received: by 2002:a1f:d1c3:: with SMTP id i186mr5548587vkg.26.1567803819036;
 Fri, 06 Sep 2019 14:03:39 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:12 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-9-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [kvm-unit-tests PATCH v4 8/9] x86: VMX: Make guest_state_test_main()
 check state from nested VM
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The current tests for guest state do not yet check the validity of
loaded state from within the nested VM. Introduce the
load_state_test_data struct to share data with the nested VM.

Signed-off-by: Oliver Upton <oupton@google.com>
---
 x86/vmx_tests.c | 23 ++++++++++++++++++++---
 1 file changed, 20 insertions(+), 3 deletions(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index 6f46c7759c85..84e1a7935aa1 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -5017,13 +5017,28 @@ static void test_entry_msr_load(void)
 	test_vmx_valid_controls(false);
 }
 
+static struct vmx_state_area_test_data {
+	u32 msr;
+	u64 exp;
+	bool enabled;
+} vmx_state_area_test_data;
+
 static void guest_state_test_main(void)
 {
+	u64 obs;
+	struct vmx_state_area_test_data *data = &vmx_state_area_test_data;
+
 	while (1) {
-		if (vmx_get_test_stage() != 2)
-			vmcall();
-		else
+		if (vmx_get_test_stage() == 2)
 			break;
+
+		if (data->enabled) {
+			obs = rdmsr(data->msr);
+			report("Guest state is 0x%lx (expected 0x%lx)",
+			       data->exp == obs, obs, data->exp);
+		}
+
+		vmcall();
 	}
 
 	asm volatile("fnop");
@@ -6854,7 +6869,9 @@ static void test_pat(u32 field, const char * field_name, u32 ctrl_field,
 	u64 i, val;
 	u32 j;
 	int error;
+	struct vmx_state_area_test_data *data = &vmx_state_area_test_data;
 
+	data->enabled = false;
 	vmcs_clear_bits(ctrl_field, ctrl_bit);
 	if (field == GUEST_PAT) {
 		vmx_set_test_stage(1);

From patchwork Fri Sep  6 21:03:13 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Oliver Upton <oupton@google.com>
X-Patchwork-Id: 11136075
Return-Path: <SRS0=9Awg=XB=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 65047924
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:44 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 3F7E22178F
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  6 Sep 2019 21:03:44 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="ZBvtFPxG"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2391195AbfIFVDn (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 6 Sep 2019 17:03:43 -0400
Received: from mail-vk1-f202.google.com ([209.85.221.202]:34746 "EHLO
        mail-vk1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2390971AbfIFVDn (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 6 Sep 2019 17:03:43 -0400
Received: by mail-vk1-f202.google.com with SMTP id v72so2842956vkv.1
        for <kvm@vger.kernel.org>; Fri, 06 Sep 2019 14:03:41 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=6o/Tmg2c7YTP90Ofm0aXe06LJ8nMJyFr26MyqVY35So=;
        b=ZBvtFPxGbAIugHUFtvHJouvhNlzLeR18MP2OblfcPpq4rhuJZefRRXny/+Q1kSEZ9H
         L3yTivcMHHn0dSpUWGVOsLOnge/jsr6T4zlkzIAP12YiTytO7aVkBZzqsn8QzV49Bw/P
         FpWxRlDIFczKQytf+u0aMku9YFWOLJCI/2V5CdzvI81SmsbHipzxChceu7EBC6byoEm5
         QBWTMUrtsowsEd4EyfV7a5iRtEO8nLI/SCLjvHC5VFa4KSrV6yfOnB3gOOBxcWjEAt8H
         +qVafODgvHDKzTcKezplBnzlNJVGIUWFo6/KRK66F1I35qK6Gsg4z6wW0Y5kSJVPmuoi
         hPQA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=6o/Tmg2c7YTP90Ofm0aXe06LJ8nMJyFr26MyqVY35So=;
        b=pPPs052hpRVboSomvUIvahVnDzLR1OuwXUl1mddh9HsK7QKk7UbhutBFJeI3JDv32a
         9DSGe2/xMxD4bTLAADXtGG9JWnmD8v0o8I6eIMDR6eVWoEWpL+4R9BVDja4xtAalNZRM
         kZyzACO6sjkWeML3fpB+sTm5dg6Kh5Xl3tAvPXHoNAegjf27leAPHvW2B44+Hm8VGFl8
         fRJPzFgQmp0h1c/fQYjx8NjzWcc5Va/L8w24/rTSIg3OeMnIKWEm0VLy2tKhoQ+estCB
         BPwgcN7B5eaetMLRY6tEancpbRxmRA9OYqH3FBsqMSSTyOrVTW2AWoPMsTC8uFCI/Yij
         3VUQ==
X-Gm-Message-State: APjAAAW8Y/0a9aTWQrVv/9WnWcfaqgVYfBoWpDv/qwS+G4LgAGGkxf9G
        LRt3lo6ttoxsLQ6BSgz/m+XPkxs9guoNjqsM4xc4WidZFl7LpfdlEwchr+IkBHfyY5xYYZvowBE
        400ND8p07OQd+f7RpzAIRIoUWY/3yI8KtjY0KPRqscmr1ZcdPrFT0UMu5sg==
X-Google-Smtp-Source: 
 APXvYqxVbMD8oxJt9upQSmcu9uLyMoRqDyb4OSsluSOY6WKy839PfdeUpXkB2HBDeJTnbxJwbiWIkyMTzuY=
X-Received: by 2002:a67:fbc8:: with SMTP id o8mr3321182vsr.173.1567803821273;
 Fri, 06 Sep 2019 14:03:41 -0700 (PDT)
Date: Fri,  6 Sep 2019 14:03:13 -0700
In-Reply-To: <20190906210313.128316-1-oupton@google.com>
Message-Id: <20190906210313.128316-10-oupton@google.com>
Mime-Version: 1.0
References: <20190906210313.128316-1-oupton@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [kvm-unit-tests PATCH v4 9/9] x86: VMX: Add tests for nested "load
 IA32_PERF_GLOBAL_CTRL"
From: Oliver Upton <oupton@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>, "
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= " <rkrcmar@redhat.com>
Cc: Jim Mattson <jmattson@google.com>, Peter Shier <pshier@google.com>,
        Krish Sadhukhan <krish.sadhukhan@oracle.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>,
        Oliver Upton <oupton@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Tests to verify that KVM performs the correct checks on Host/Guest state
at VM-entry, as described in SDM 26.3.1.1 "Checks on Guest Control
Registers, Debug Registers, and MSRs" and SDM 26.2.2 "Checks on Host
Control Registers and MSRs".

Test that KVM does the following:

    If the "load IA32_PERF_GLOBAL_CTRL" VM-entry control is 1, the
    reserved bits of the IA32_PERF_GLOBAL_CTRL MSR must be 0 in the
    GUEST_IA32_PERF_GLOBAL_CTRL VMCS field. Otherwise, the VM-entry
    should fail with an exit reason of "VM-entry failure due to invalid
    guest state" (33). On a successful VM-entry, the correct value
    should be observed when the nested VM performs an RDMSR on
    IA32_PERF_GLOBAL_CTRL.

    If the "load IA32_PERF_GLOBAL_CTRL" VM-exit control is 1, the
    reserved bits of the IA32_PERF_GLOBAL_CTRL MSR must be 0 in the
    HOST_IA32_PERF_GLOBAL_CTRL VMCS field. Otherwise, the VM-entry
    should fail with a VM-instruction error of "VM entry with invalid
    host-state field(s)" (8). On a successful VM-exit, the correct value
    should be observed when L1 performs an RDMSR on
    IA32_PERF_GLOBAL_CTRL.

Suggested-by: Jim Mattson <jmattson@google.com>
Co-developed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Signed-off-by: Oliver Upton <oupton@google.com>
---
 x86/vmx_tests.c | 172 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 172 insertions(+)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index 84e1a7935aa1..86424dab615a 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -6854,6 +6854,176 @@ static void test_host_efer(void)
 	test_efer(HOST_EFER, "HOST_EFER", EXI_CONTROLS, EXI_LOAD_EFER);
 }
 
+union cpuidA_eax {
+	struct {
+		unsigned int version_id:8;
+		unsigned int num_counters_gp:8;
+		unsigned int bit_width:8;
+		unsigned int mask_length:8;
+	} split;
+	unsigned int full;
+};
+
+union cpuidA_edx {
+	struct {
+		unsigned int num_counters_fixed:5;
+		unsigned int bit_width_fixed:8;
+		unsigned int reserved:19;
+	} split;
+	unsigned int full;
+};
+
+static bool valid_pgc(u64 val)
+{
+	struct cpuid id;
+	union cpuidA_eax eax;
+	union cpuidA_edx edx;
+	u64 mask;
+
+	id = cpuid(0xA);
+	eax.full = id.a;
+	edx.full = id.d;
+	mask = ~(((1ull << eax.split.num_counters_gp) - 1) |
+		(((1ull << edx.split.num_counters_fixed) - 1) << 32));
+
+	return !(val & mask);
+}
+
+static void test_pgc_vmlaunch(u32 xerror, u32 xreason, bool xfail, bool host)
+{
+	u32 inst_err;
+	u64 obs;
+	bool success;
+	struct vmx_state_area_test_data *data = &vmx_state_area_test_data;
+
+	if (host) {
+		success = vmlaunch_succeeds();
+		obs = rdmsr(data->msr);
+		if (!success) {
+			inst_err = vmcs_read(VMX_INST_ERROR);
+			report("vmlaunch failed, VMX Inst Error is %d (expected %d)",
+			       xerror == inst_err, inst_err, xerror);
+		} else {
+			report("Host state is 0x%lx (expected 0x%lx)",
+			       !data->enabled || data->exp == obs, obs, data->exp);
+			report("vmlaunch succeeded", success != xfail);
+		}
+	} else {
+		if (xfail) {
+			enter_guest_with_invalid_guest_state();
+		} else {
+			enter_guest();
+		}
+		report_guest_state_test("load GUEST_PERF_GLOBAL_CTRL",
+					xreason, GUEST_PERF_GLOBAL_CTRL,
+					"GUEST_PERF_GLOBAL_CTRL");
+	}
+}
+
+/*
+ * test_load_perf_global_ctrl is a generic function for testing the
+ * "load IA32_PERF_GLOBAL_CTRL" VM-{entry,exit} control. This test function
+ * will test the provided ctrl_val disabled and enabled.
+ *
+ * @nr - VMCS field number corresponding to the Host/Guest state field
+ * @name - Name of the above VMCS field for printing in test report
+ * @ctrl_nr - VMCS field number corresponding to the VM-{entry,exit} control
+ * @ctrl_val - Bit to set on the ctrl field.
+ */
+static void test_load_perf_global_ctrl(u32 nr, const char *name, u32 ctrl_nr,
+				       const char *ctrl_name, u64 ctrl_val)
+{
+	u64 ctrl_saved = vmcs_read(ctrl_nr);
+	u64 pgc_saved = vmcs_read(nr);
+	u64 i, val;
+	bool host = nr == HOST_PERF_GLOBAL_CTRL;
+	struct vmx_state_area_test_data *data = &vmx_state_area_test_data;
+
+	if (!host) {
+		vmx_set_test_stage(1);
+		test_reset_guest(guest_state_test_main);
+	}
+	data->msr = MSR_CORE_PERF_GLOBAL_CTRL;
+	msr_bmp_init();
+	vmcs_write(ctrl_nr, ctrl_saved & ~ctrl_val);
+	data->enabled = false;
+	report_prefix_pushf("\"load IA32_PERF_GLOBAL_CTRL\"=0 on %s",
+			    ctrl_name);
+	for (i = 0; i < 64; i++) {
+		val = 1ull << i;
+		vmcs_write(nr, val);
+		report_prefix_pushf("%s = 0x%lx", name, val);
+		test_pgc_vmlaunch(0, VMX_VMCALL, false, host);
+		report_prefix_pop();
+	}
+	report_prefix_pop();
+
+	vmcs_write(ctrl_nr, ctrl_saved | ctrl_val);
+	data->enabled = true;
+	report_prefix_pushf("\"load IA32_PERF_GLOBAL_CTRL\"=1 on %s",
+			    ctrl_name);
+	for (i = 0; i < 64; i++) {
+		val = 1ull << i;
+		data->exp = val;
+		vmcs_write(nr, val);
+		report_prefix_pushf("%s = 0x%lx", name, val);
+		if (valid_pgc(val)) {
+			test_pgc_vmlaunch(0, VMX_VMCALL, false, host);
+		} else {
+			if (host)
+				test_pgc_vmlaunch(
+					VMXERR_ENTRY_INVALID_HOST_STATE_FIELD,
+					0,
+					true, host);
+			else
+				test_pgc_vmlaunch(
+					0,
+					VMX_ENTRY_FAILURE | VMX_FAIL_STATE,
+					true, host);
+		}
+		report_prefix_pop();
+	}
+
+	report_prefix_pop();
+
+	if (nr == GUEST_PERF_GLOBAL_CTRL) {
+		/*
+		 * Let the guest finish execution
+		 */
+		vmx_set_test_stage(2);
+		vmcs_write(ctrl_nr, ctrl_saved);
+		vmcs_write(nr, pgc_saved);
+		enter_guest();
+	}
+
+	vmcs_write(ctrl_nr, ctrl_saved);
+	vmcs_write(nr, pgc_saved);
+}
+
+static void test_load_host_perf_global_ctrl(void)
+{
+	if (!(ctrl_exit_rev.clr & EXI_LOAD_PERF)) {
+		printf("\"load IA32_PERF_GLOBAL_CTRL\" "
+		       "exit control not supported\n");
+		return;
+	}
+
+	test_load_perf_global_ctrl(HOST_PERF_GLOBAL_CTRL, "HOST_PERF_GLOBAL_CTRL",
+		      EXI_CONTROLS, "EXI_CONTROLS", EXI_LOAD_PERF);
+}
+
+
+static void test_load_guest_perf_global_ctrl(void)
+{
+	if (!(ctrl_enter_rev.clr & ENT_LOAD_PERF)) {
+		printf("\"load IA32_PERF_GLOBAL_CTRL\" "
+		       "entry control not supported\n");
+	}
+
+	test_load_perf_global_ctrl(GUEST_PERF_GLOBAL_CTRL, "GUEST_PERF_GLOBAL_CTRL",
+		      ENT_CONTROLS, "ENT_CONTROLS", ENT_LOAD_PERF);
+}
+
 /*
  * PAT values higher than 8 are uninteresting since they're likely lumped
  * in with "8". We only test values above 8 one bit at a time,
@@ -7147,6 +7317,7 @@ static void vmx_host_state_area_test(void)
 	test_sysenter_field(HOST_SYSENTER_EIP, "HOST_SYSENTER_EIP");
 
 	test_host_efer();
+	test_load_host_perf_global_ctrl();
 	test_load_host_pat();
 	test_host_segment_regs();
 	test_host_desc_tables();
@@ -7181,6 +7352,7 @@ static void test_load_guest_pat(void)
 static void vmx_guest_state_area_test(void)
 {
 	test_load_guest_pat();
+	test_load_guest_perf_global_ctrl();
 }
 
 static bool valid_vmcs_for_vmentry(void)
