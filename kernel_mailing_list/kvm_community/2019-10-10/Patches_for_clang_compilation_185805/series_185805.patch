From patchwork Thu Oct 10 18:35:04 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Bill Wendling <morbo@google.com>
X-Patchwork-Id: 11184053
Return-Path: <SRS0=OAn+=YD=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id CBEA517EE
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 10 Oct 2019 18:35:44 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A3A1421835
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 10 Oct 2019 18:35:44 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="kKdN3OX3"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726628AbfJJSfo (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 10 Oct 2019 14:35:44 -0400
Received: from mail-pl1-f202.google.com ([209.85.214.202]:56927 "EHLO
        mail-pl1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725901AbfJJSfn (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 10 Oct 2019 14:35:43 -0400
Received: by mail-pl1-f202.google.com with SMTP id x8so4371069plr.23
        for <kvm@vger.kernel.org>; Thu, 10 Oct 2019 11:35:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=XTuI7th3+9dwO3nKtBiY4qgOMbcjEb2zppHYOAbpHRc=;
        b=kKdN3OX3CtBaAFl02mXXGN9Uw9dpGcwGpg9dBRYNrYe+L/yTf7H2ZLZJZK2knPepwa
         vtBZYFcyb3823+jWUniHF+ovklg4cHR2CBJfkXCDjshpGhSBhiJu8S8GD1OErEsr2JvN
         Uml0+MFhqs0Ium2VRXFp9k7RE9Xl5XBRbmn5a7f9AGxS5oaDXK60PowXAILjTwM5Oopm
         +B4GqcXZv7sEth/Ua24ySRWpbRxXDB8pngGF4dzalrsSWROXSglxtog6gTlGS93vyrPI
         ngK2v2GbXlm+bcn9/WGl5IrpaO2sjzv3PDRj5D7MH55T3Lh65HRW7FiRFQnmusHLQhlq
         tiwA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=XTuI7th3+9dwO3nKtBiY4qgOMbcjEb2zppHYOAbpHRc=;
        b=P1g40f5LmZ1ZSSLL+BkxBrelPR71kfsURUqD2h3IRVvC15VIwyqRXitW6QjWhArnHP
         3OgnyjOeETD20hCUME/svvfVuWwyy2+hfi+keIE5R0agAFi66Ov9GaVYj87BXPimgGUu
         xKFVguOoD43E+zCaxSW+7ZTj6IoK6vQ7YbOKTYRWQELoxicj8pIIkYMZISNEkqnoOsUC
         yFtpuAi+Tx7GJJpHf9q7kBCn+jDL3mD+0+cXAAAAv6Hx2wOlFTxapMDza9ZveiIuCX0t
         gyno80RlOs95I0QWMsqegkG6soAj1VWDjEzgXmFc5NJkqU5yjFjfTWq8MwG19dldd29k
         bqrA==
X-Gm-Message-State: APjAAAVJki3iGVs9QMw9rxHXJONqNG704fLSIfux5f2N4mv8CiC2x8v+
        LwGWqQTRDlOCRyCFiMhN49v1odyNRgrHEVil1vsB7TWfW65Ew/ymKdDDDvFTxLAERDlf18MI7o0
        ZFuXXJR6A/fQYvARajCDqdf3/NuAT35EgfcEOWu5cE1PzJG5ljBljnA==
X-Google-Smtp-Source: 
 APXvYqxaFHpZyRfjoYxSLO8vh1f5AyAY5wQ6uNQfo+9W+NQpK40h4qWKe74eEGWtwF+3QqinDw94Z3UU9w==
X-Received: by 2002:a63:dc49:: with SMTP id f9mr12828634pgj.91.1570732541309;
 Thu, 10 Oct 2019 11:35:41 -0700 (PDT)
Date: Thu, 10 Oct 2019 11:35:04 -0700
In-Reply-To: <20191010183506.129921-1-morbo@google.com>
Message-Id: <20191010183506.129921-2-morbo@google.com>
Mime-Version: 1.0
References: <20191010183506.129921-1-morbo@google.com>
X-Mailer: git-send-email 2.23.0.700.g56cf767bdb-goog
Subject: [kvm-unit-tests PATCH 1/3] x86: emulator: use "SSE2" for the target
From: Bill Wendling <morbo@google.com>
To: kvm@vger.kernel.org, pbonzini@redhat.com
Cc: jmattson@google.com, Bill Wendling <morbo@google.com>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The movdqu and movapd instructions are SSE2 instructions. Clang
interprets the __attribute__((target("sse"))) as allowing SSE only
instructions. Using SSE2 instructions cause an error.

Signed-off-by: Bill Wendling <morbo@google.com>
---
 x86/emulator.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/x86/emulator.c b/x86/emulator.c
index 621caf9..bec0154 100644
--- a/x86/emulator.c
+++ b/x86/emulator.c
@@ -657,7 +657,7 @@ static bool sseeq(sse_union *v1, sse_union *v2)
     return ok;
 }
 
-static __attribute__((target("sse"))) void test_sse(sse_union *mem)
+static __attribute__((target("sse2"))) void test_sse(sse_union *mem)
 {
     sse_union v;
 

From patchwork Thu Oct 10 18:35:05 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Bill Wendling <morbo@google.com>
X-Patchwork-Id: 11184055
Return-Path: <SRS0=OAn+=YD=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 2E2D514DB
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 10 Oct 2019 18:35:47 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 0EC5220B7C
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 10 Oct 2019 18:35:47 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="Fx0sVl5i"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725901AbfJJSfq (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 10 Oct 2019 14:35:46 -0400
Received: from mail-pg1-f201.google.com ([209.85.215.201]:46002 "EHLO
        mail-pg1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726712AbfJJSfq (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 10 Oct 2019 14:35:46 -0400
Received: by mail-pg1-f201.google.com with SMTP id x31so5011340pgl.12
        for <kvm@vger.kernel.org>; Thu, 10 Oct 2019 11:35:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=byAY/eTBNLsBVkb20fBKKyqlgQhkiEQH/5g179LmxWs=;
        b=Fx0sVl5iz2EuJj6yU18p/v2otdgV5gb8u2d8srVAFM4S5ILXk2W9gmDrfVVqh6C5DP
         67VP0nFRtAZypetkgL9T/C0xN/6Q4rT2LNVyyLHsES7nDRBrKuCsAKC9ZYtTDe2rXshC
         VwK2S+xxEVWMK+rihmnoLgi4PousIcIJqoFrPx3gFKQn7swF0IffronT2Ktvgf25L0m9
         a8brnYd8W3StBrhWdaPzge7jgLiMdd7xvH8rGMlOjv+y+hap7THn1KsQFXgT7bkH0Ed6
         SIXA4/m0DyrCmmvOlrNqn7F4DrsWcifhRn/+4dkBcdNMhiZXSWvBs/IRpb26shjiRPNs
         0N+w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=byAY/eTBNLsBVkb20fBKKyqlgQhkiEQH/5g179LmxWs=;
        b=ueDcaWVZovK96Y/3Gt4+IT2qoYWr7XPWA5JQjvatCYqbLHiDVD3/J037Iz1j+SW6Kv
         uflVdZYqC4slh5xQkZlwy5b8ANRMfU0UX/4T4bfFUh8rhQF1TmW6fZDAYUc/OccwIOZd
         jCMYkG8VAfPpDpMpIj/1by9RFYky1Tgm3ULziix57yC6BDYyLveKAV1W7PokuMbTlnLJ
         tmo95Qsf+ZrxhZq/7HDlfrzkubb3AgszHEF5PIGSLLQUU4f62tirGNRcVis2sqlW9kaI
         tqXACH3LVIft6kRuKZaZwspmG0D3nkQa8BTkMesOyMpQmlBIS/MdhaznwTvxwKx8AhZp
         ALyw==
X-Gm-Message-State: APjAAAWkEmCGoNGjutuidjoiOP3KtehpjutR+IFICPrRFZseFdiHKkfp
        EiXW3mKsYFMungSHzfdH1VcVOvT8bp/lh4lpjugcCh+d5q8FMuUovQoAH6fTjFYnoZhxL7RZzA/
        bCrvmaRNWSTchy4viTrgGrQbpd2IpOzs8WS/pHaAOPnmzWHzDyeJI+w==
X-Google-Smtp-Source: 
 APXvYqyQOwPJZmRYN55XnS/pMjyBE3ggUxBPdR3rdY/6SN+U0eRohINZDOhv4O1CSOCpixRMHxRnDmOCGQ==
X-Received: by 2002:a63:1b44:: with SMTP id b4mr12903823pgm.421.1570732544721;
 Thu, 10 Oct 2019 11:35:44 -0700 (PDT)
Date: Thu, 10 Oct 2019 11:35:05 -0700
In-Reply-To: <20191010183506.129921-1-morbo@google.com>
Message-Id: <20191010183506.129921-3-morbo@google.com>
Mime-Version: 1.0
References: <20191010183506.129921-1-morbo@google.com>
X-Mailer: git-send-email 2.23.0.700.g56cf767bdb-goog
Subject: [kvm-unit-tests PATCH 2/3] pci: use uint64_t for unsigned long values
From: Bill Wendling <morbo@google.com>
To: kvm@vger.kernel.org, pbonzini@redhat.com
Cc: jmattson@google.com, Bill Wendling <morbo@google.com>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The "pci_bar_*" functions work with unsigned long values, but were using
uint32_t for the data types. Clang complains about this. So we bump up
the type to uint64_t.

  lib/pci.c:110:3: error: implicit conversion from 'unsigned long' to 'uint32_t' (aka 'unsigned int') changes value from 18446744073709551612 to 4294967292 [-Werror,-Wconstant-conversion]
                  PCI_BASE_ADDRESS_IO_MASK : PCI_BASE_ADDRESS_MEM_MASK;
                ^~~~~~~~~~~~~~~~~~~~~~~~
  /usr/local/google/home/morbo/kvm-unit-tests/lib/linux/pci_regs.h:100:36: note: expanded from macro 'PCI_BASE_ADDRESS_IO_MASK'
  #define  PCI_BASE_ADDRESS_IO_MASK       (~0x03UL)
                                           ^~~~~~~
  lib/pci.c:110:30: error: implicit conversion from 'unsigned long' to 'uint32_t' (aka 'unsigned int') changes value from 18446744073709551600 to 4294967280 [-Werror,-Wconstant-conversion]
                  PCI_BASE_ADDRESS_IO_MASK : PCI_BASE_ADDRESS_MEM_MASK;
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~
  /usr/local/google/home/morbo/kvm-unit-tests/lib/linux/pci_regs.h:99:37: note: expanded from macro 'PCI_BASE_ADDRESS_MEM_MASK'
  #define  PCI_BASE_ADDRESS_MEM_MASK      (~0x0fUL)
                                         ^~~~~~~

Signed-off-by: Bill Wendling <morbo@google.com>
---
 lib/pci.c | 18 +++++++++---------
 lib/pci.h |  4 ++--
 2 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/lib/pci.c b/lib/pci.c
index daa33e1..e554209 100644
--- a/lib/pci.c
+++ b/lib/pci.c
@@ -104,13 +104,13 @@ pcidevaddr_t pci_find_dev(uint16_t vendor_id, uint16_t device_id)
 	return PCIDEVADDR_INVALID;
 }
 
-uint32_t pci_bar_mask(uint32_t bar)
+uint64_t pci_bar_mask(uint32_t bar)
 {
 	return (bar & PCI_BASE_ADDRESS_SPACE_IO) ?
 		PCI_BASE_ADDRESS_IO_MASK : PCI_BASE_ADDRESS_MEM_MASK;
 }
 
-uint32_t pci_bar_get(struct pci_dev *dev, int bar_num)
+uint64_t pci_bar_get(struct pci_dev *dev, int bar_num)
 {
 	ASSERT_BAR_NUM(bar_num);
 
@@ -120,13 +120,13 @@ uint32_t pci_bar_get(struct pci_dev *dev, int bar_num)
 
 static phys_addr_t __pci_bar_get_addr(struct pci_dev *dev, int bar_num)
 {
-	uint32_t bar = pci_bar_get(dev, bar_num);
-	uint32_t mask = pci_bar_mask(bar);
+	uint64_t bar = pci_bar_get(dev, bar_num);
+	uint64_t mask = pci_bar_mask(bar);
 	uint64_t addr = bar & mask;
 	phys_addr_t phys_addr;
 
 	if (pci_bar_is64(dev, bar_num))
-		addr |= (uint64_t)pci_bar_get(dev, bar_num + 1) << 32;
+		addr |= pci_bar_get(dev, bar_num + 1) << 32;
 
 	phys_addr = pci_translate_addr(dev->bdf, addr);
 	assert(phys_addr != INVALID_PHYS_ADDR);
@@ -189,7 +189,7 @@ static uint32_t pci_bar_size_helper(struct pci_dev *dev, int bar_num)
 
 phys_addr_t pci_bar_size(struct pci_dev *dev, int bar_num)
 {
-	uint32_t bar, size;
+	uint64_t bar, size;
 
 	size = pci_bar_size_helper(dev, bar_num);
 	if (!size)
@@ -210,7 +210,7 @@ phys_addr_t pci_bar_size(struct pci_dev *dev, int bar_num)
 
 bool pci_bar_is_memory(struct pci_dev *dev, int bar_num)
 {
-	uint32_t bar = pci_bar_get(dev, bar_num);
+	uint64_t bar = pci_bar_get(dev, bar_num);
 
 	return !(bar & PCI_BASE_ADDRESS_SPACE_IO);
 }
@@ -222,7 +222,7 @@ bool pci_bar_is_valid(struct pci_dev *dev, int bar_num)
 
 bool pci_bar_is64(struct pci_dev *dev, int bar_num)
 {
-	uint32_t bar = pci_bar_get(dev, bar_num);
+	uint64_t bar = pci_bar_get(dev, bar_num);
 
 	if (bar & PCI_BASE_ADDRESS_SPACE_IO)
 		return false;
@@ -234,7 +234,7 @@ bool pci_bar_is64(struct pci_dev *dev, int bar_num)
 void pci_bar_print(struct pci_dev *dev, int bar_num)
 {
 	phys_addr_t size, start, end;
-	uint32_t bar;
+	uint64_t bar;
 
 	if (!pci_bar_is_valid(dev, bar_num))
 		return;
diff --git a/lib/pci.h b/lib/pci.h
index 689f03c..cd12938 100644
--- a/lib/pci.h
+++ b/lib/pci.h
@@ -60,8 +60,8 @@ extern pcidevaddr_t pci_find_dev(uint16_t vendor_id, uint16_t device_id);
 extern phys_addr_t pci_bar_get_addr(struct pci_dev *dev, int bar_num);
 extern void pci_bar_set_addr(struct pci_dev *dev, int bar_num, phys_addr_t addr);
 extern phys_addr_t pci_bar_size(struct pci_dev *dev, int bar_num);
-extern uint32_t pci_bar_get(struct pci_dev *dev, int bar_num);
-extern uint32_t pci_bar_mask(uint32_t bar);
+extern uint64_t pci_bar_get(struct pci_dev *dev, int bar_num);
+extern uint64_t pci_bar_mask(uint32_t bar);
 extern bool pci_bar_is64(struct pci_dev *dev, int bar_num);
 extern bool pci_bar_is_memory(struct pci_dev *dev, int bar_num);
 extern bool pci_bar_is_valid(struct pci_dev *dev, int bar_num);

From patchwork Thu Oct 10 18:35:06 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Bill Wendling <morbo@google.com>
X-Patchwork-Id: 11184057
Return-Path: <SRS0=OAn+=YD=vger.kernel.org=kvm-owner@kernel.org>
Received: from mail.kernel.org (pdx-korg-mail-1.web.codeaurora.org
 [172.30.200.123])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 8315D17EE
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 10 Oct 2019 18:35:49 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 63FEA214E0
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 10 Oct 2019 18:35:49 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (2048-bit key) header.d=google.com header.i=@google.com
 header.b="EwTYoOE9"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726757AbfJJSfs (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 10 Oct 2019 14:35:48 -0400
Received: from mail-pf1-f202.google.com ([209.85.210.202]:56521 "EHLO
        mail-pf1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726783AbfJJSfs (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 10 Oct 2019 14:35:48 -0400
Received: by mail-pf1-f202.google.com with SMTP id b17so5375772pfo.23
        for <kvm@vger.kernel.org>; Thu, 10 Oct 2019 11:35:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=Vc8OTlhGfb05aXJfWu7AtqIcU+fGPGUvUYZpoXjMLmQ=;
        b=EwTYoOE9eywTE/DXHv5xVrGexu/+p1lMCXoJs7rJcUGKp3k5A1Eh22/a94Dy1XOhA8
         g9UlQ2q9qeckAReRDj2fxKEIPpgt7Gev+8CvyxkjDDBSWW8/z+va0WLxzn9grp/jsvXV
         FLM3DsABT95CYMNH6UdADm7ET3q60CQrZhGUzecopP2obbpOnzeErjFryhNVeyu20WN5
         CPq5bEXlLyirAqL1wyBSnnHAbmbfwiqnOZbTQyiyZhcB/v6V+tJ79m1R7szTWElW/bHN
         uCyVrZ95S1cpTCCG7Vguwkn2LBauSogqMjAU3Nx5eXj5TkXASkD389y95BDid/tS4hw+
         Cr6g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=Vc8OTlhGfb05aXJfWu7AtqIcU+fGPGUvUYZpoXjMLmQ=;
        b=I2SePKShn9PKlb2vKGrK80dKOHfD2HQaMO/qKkoWQrD7JyIyNH9Q/dclzQx1oXiXzP
         LPs2mZWh52j5wcMYvEKn9fZBNZWGWE5iUADV0uxG3m5BxJnlJPYpXvsAd2YAk3HNIbTZ
         td6NySiLUA4Tj8muMWmycXIH1ZOmCl6HDymrDiZkkMstpbtJLCuF3kTXBWpFF/pBLbnd
         uPSW1ihjn0QoWE3orJt8gPsvf1n3Qhl+z1KiufRP47OqNFaqUM5NQDtXnG0m6Kryu36j
         pi+YPfdSVQdCZo06v5TxFVVIZ2IsgA96/RhR1ofGLf3JW2xhIf5wRN/4Rybjk84Fgffk
         /0tw==
X-Gm-Message-State: APjAAAURTMke+2ah4wOFTN5yg/MJf1uYhnQO6iXxf+MDVUWGtYnNLd5r
        Svmx1v1ujFtsFHUmeFWoHi5y7vT3LctaXr/lNB5uvdDHf0SLuOXorkiZ2YGQUUvw7ND8jsdd1+o
        +6+qLzJjPvSi6f2KdPj9UhXovbgdnnYdR2o7/qiSTNnhuOw9KXDKvpA==
X-Google-Smtp-Source: 
 APXvYqzntkMflsMnpnnQWNiQ/DP9MuJvwejmuBUH65YaBDTdcBsjYBjZsscAJG2slifaDddwTSesZo9EHw==
X-Received: by 2002:a63:f418:: with SMTP id g24mr12763866pgi.15.1570732547118;
 Thu, 10 Oct 2019 11:35:47 -0700 (PDT)
Date: Thu, 10 Oct 2019 11:35:06 -0700
In-Reply-To: <20191010183506.129921-1-morbo@google.com>
Message-Id: <20191010183506.129921-4-morbo@google.com>
Mime-Version: 1.0
References: <20191010183506.129921-1-morbo@google.com>
X-Mailer: git-send-email 2.23.0.700.g56cf767bdb-goog
Subject: [kvm-unit-tests PATCH 3/3] Makefile: use "-Werror" in cc-option
From: Bill Wendling <morbo@google.com>
To: kvm@vger.kernel.org, pbonzini@redhat.com
Cc: jmattson@google.com, Bill Wendling <morbo@google.com>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The "cc-option" macro should use "-Werror" to determine if a flag is
supported. Otherwise the test may not return a nonzero result. Also
conditionalize some of the warning flags which aren't supported by
clang.

Signed-off-by: Bill Wendling <morbo@google.com>
---
 Makefile | 19 +++++++++++--------
 1 file changed, 11 insertions(+), 8 deletions(-)

diff --git a/Makefile b/Makefile
index 32414dc..3ec0458 100644
--- a/Makefile
+++ b/Makefile
@@ -46,30 +46,33 @@ include $(SRCDIR)/$(TEST_DIR)/Makefile
 # cc-option
 # Usage: OP_CFLAGS+=$(call cc-option, -falign-functions=0, -malign-functions=0)
 
-cc-option = $(shell if $(CC) $(1) -S -o /dev/null -xc /dev/null \
+cc-option = $(shell if $(CC) -Werror $(1) -S -o /dev/null -xc /dev/null \
               > /dev/null 2>&1; then echo "$(1)"; else echo "$(2)"; fi ;)
 
 COMMON_CFLAGS += -g $(autodepend-flags)
-COMMON_CFLAGS += -Wall -Wwrite-strings -Wclobbered -Wempty-body -Wuninitialized
-COMMON_CFLAGS += -Wignored-qualifiers -Wunused-but-set-parameter
-COMMON_CFLAGS += -Werror
+COMMON_CFLAGS += -Wall -Wwrite-strings -Wempty-body -Wuninitialized
+COMMON_CFLAGS += -Wignored-qualifiers -Werror
+
 frame-pointer-flag=-f$(if $(KEEP_FRAME_POINTER),no-,)omit-frame-pointer
 fomit_frame_pointer := $(call cc-option, $(frame-pointer-flag), "")
 fnostack_protector := $(call cc-option, -fno-stack-protector, "")
 fnostack_protector_all := $(call cc-option, -fno-stack-protector-all, "")
-wno_frame_address := $(call cc-option, -Wno-frame-address, "")
 fno_pic := $(call cc-option, -fno-pic, "")
 no_pie := $(call cc-option, -no-pie, "")
 COMMON_CFLAGS += $(fomit_frame_pointer)
 COMMON_CFLAGS += $(fno_stack_protector)
 COMMON_CFLAGS += $(fno_stack_protector_all)
-COMMON_CFLAGS += $(wno_frame_address)
 COMMON_CFLAGS += $(if $(U32_LONG_FMT),-D__U32_LONG_FMT__,)
 COMMON_CFLAGS += $(fno_pic) $(no_pie)
 
+COMMON_CFLAGS += $(call cc-option, -Wno-frame-address, "")
+COMMON_CFLAGS += $(call cc-option, -Wclobbered, "")
+COMMON_CFLAGS += $(call cc-option, -Wunused-but-set-parameter, "")
+COMMON_CFLAGS += $(call cc-option, -Wmissing-parameter-type, "")
+COMMON_CFLAGS += $(call cc-option, -Wold-style-declaration, "")
+
 CFLAGS += $(COMMON_CFLAGS)
-CFLAGS += -Wmissing-parameter-type -Wold-style-declaration -Woverride-init
-CFLAGS += -Wmissing-prototypes -Wstrict-prototypes
+CFLAGS += -Woverride-init -Wmissing-prototypes -Wstrict-prototypes
 
 CXXFLAGS += $(COMMON_CFLAGS)
 
